/*
 * copyright (c) 20013 Crazyender
 *
 * This file is part of FFmpeg.mono
 *
 * FFmpeg.mono is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * FFmpeg.mono is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with FFmpeg; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 */


using System;
using System.Collections.Generic;
using System.Runtime;
using System.Runtime.InteropServices;
using System.Security;
namespace SharpFFmpeg
{
    public partial class AV 
{
		#if WIN32
public const string AVCODEC = "avcodec-55.dll";
		#else
		public const string AVCODEC = "avcodec";
		#endif

public static readonly int AVCODEC_MAX_AUDIO_FRAME_SIZE = 192000;
public static readonly uint AV_CODEC_ID_H265 = (uint)AVCodecID.AV_CODEC_ID_HEVC;
public static readonly uint AV_CODEC_PROP_INTRA_ONLY = (1 << 0);
public static readonly uint AV_CODEC_PROP_LOSSY = (1 << 1);
public static readonly uint AV_CODEC_PROP_LOSSLESS = (1 << 2);
public static readonly uint AV_CODEC_PROP_BITMAP_SUB = (1 << 16);
public static readonly uint AV_CODEC_PROP_TEXT_SUB = (1 << 17);
public static readonly uint FF_INPUT_BUFFER_PADDING_SIZE = 16;
public static readonly uint FF_MIN_BUFFER_SIZE = 16384;
public static readonly uint FF_MAX_B_FRAMES = 16;
public static readonly int CODEC_FLAG_UNALIGNED = 0x0001;
public static readonly int CODEC_FLAG_QSCALE = 0x0002;
public static readonly int CODEC_FLAG_4MV = 0x0004;
public static readonly int CODEC_FLAG_OUTPUT_CORRUPT = 0x0008;
public static readonly int CODEC_FLAG_QPEL = 0x0010;
public static readonly int CODEC_FLAG_GMC = 0x0020;
public static readonly int CODEC_FLAG_MV0 = 0x0040;
public static readonly int CODEC_FLAG_INPUT_PRESERVED = 0x0100;
public static readonly int CODEC_FLAG_PASS1 = 0x0200;
public static readonly int CODEC_FLAG_PASS2 = 0x0400;
public static readonly int CODEC_FLAG_GRAY = 0x2000;
public static readonly int CODEC_FLAG_EMU_EDGE = 0x4000;
public static readonly int CODEC_FLAG_PSNR = 0x8000;
public static readonly int CODEC_FLAG_TRUNCATED = 0x00010000;
public static readonly int CODEC_FLAG_NORMALIZE_AQP = 0x00020000;
public static readonly int CODEC_FLAG_INTERLACED_DCT = 0x00040000;
public static readonly int CODEC_FLAG_LOW_DELAY = 0x00080000;
public static readonly int CODEC_FLAG_GLOBAL_HEADER = 0x00400000;
public static readonly int CODEC_FLAG_BITEXACT = 0x00800000;
public static readonly int CODEC_FLAG_AC_PRED = 0x01000000;
public static readonly int CODEC_FLAG_LOOP_FILTER = 0x00000800;
public static readonly int CODEC_FLAG_INTERLACED_ME = 0x20000000;
public static readonly uint CODEC_FLAG_CLOSED_GOP = 0x80000000;
public static readonly int CODEC_FLAG2_FAST = 0x00000001;
public static readonly int CODEC_FLAG2_NO_OUTPUT = 0x00000004;
public static readonly int CODEC_FLAG2_LOCAL_HEADER = 0x00000008;
public static readonly int CODEC_FLAG2_DROP_FRAME_TIMECODE = 0x00002000;
public static readonly int CODEC_FLAG2_IGNORE_CROP = 0x00010000;
public static readonly int CODEC_FLAG2_CHUNKS = 0x00008000;
public static readonly int CODEC_FLAG2_SHOW_ALL = 0x00400000;
public static readonly int CODEC_CAP_DRAW_HORIZ_BAND = 0x0001;
public static readonly int CODEC_CAP_DR1 = 0x0002;
public static readonly int CODEC_CAP_TRUNCATED = 0x0008;
public static readonly int CODEC_CAP_HWACCEL = 0x0010;
public static readonly int CODEC_CAP_DELAY = 0x0020;
public static readonly int CODEC_CAP_SMALL_LAST_FRAME = 0x0040;
public static readonly int CODEC_CAP_HWACCEL_VDPAU = 0x0080;
public static readonly int CODEC_CAP_SUBFRAMES = 0x0100;
public static readonly int CODEC_CAP_EXPERIMENTAL = 0x0200;
public static readonly int CODEC_CAP_CHANNEL_CONF = 0x0400;
public static readonly int CODEC_CAP_NEG_LINESIZES = 0x0800;
public static readonly int CODEC_CAP_FRAME_THREADS = 0x1000;
public static readonly int CODEC_CAP_SLICE_THREADS = 0x2000;
public static readonly int CODEC_CAP_PARAM_CHANGE = 0x4000;
public static readonly int CODEC_CAP_AUTO_THREADS = 0x8000;
public static readonly int CODEC_CAP_VARIABLE_FRAME_SIZE = 0x10000;
public static readonly int CODEC_CAP_INTRA_ONLY = 0x40000000;
public static readonly uint CODEC_CAP_LOSSLESS = 0x80000000;
public static readonly uint MB_TYPE_INTRA4x4 = 0x0001;
public static readonly uint MB_TYPE_INTRA16x16 = 0x0002;
public static readonly uint MB_TYPE_INTRA_PCM = 0x0004;
public static readonly uint MB_TYPE_16x16 = 0x0008;
public static readonly uint MB_TYPE_16x8 = 0x0010;
public static readonly uint MB_TYPE_8x16 = 0x0020;
public static readonly uint MB_TYPE_8x8 = 0x0040;
public static readonly uint MB_TYPE_INTERLACED = 0x0080;
public static readonly uint MB_TYPE_DIRECT2 = 0x0100;
public static readonly uint MB_TYPE_ACPRED = 0x0200;
public static readonly uint MB_TYPE_GMC = 0x0400;
public static readonly uint MB_TYPE_SKIP = 0x0800;
public static readonly uint MB_TYPE_P0L0 = 0x1000;
public static readonly uint MB_TYPE_P1L0 = 0x2000;
public static readonly uint MB_TYPE_P0L1 = 0x4000;
public static readonly uint MB_TYPE_P1L1 = 0x8000;
public static readonly uint MB_TYPE_L0 = (MB_TYPE_P0L0 | MB_TYPE_P1L0);
public static readonly uint MB_TYPE_L1 = (MB_TYPE_P0L1 | MB_TYPE_P1L1);
public static readonly uint MB_TYPE_L0L1 = (MB_TYPE_L0   | MB_TYPE_L1);
public static readonly uint MB_TYPE_QUANT = 0x00010000;
public static readonly uint MB_TYPE_CBP = 0x00020000;
public static readonly uint FF_QSCALE_TYPE_MPEG1 = 0;
public static readonly uint FF_QSCALE_TYPE_MPEG2 = 1;
public static readonly uint FF_QSCALE_TYPE_H264 = 2;
public static readonly uint FF_QSCALE_TYPE_VP56 = 3;
public static readonly uint FF_BUFFER_TYPE_INTERNAL = 1;
public static readonly uint FF_BUFFER_TYPE_USER = 2;
public static readonly uint FF_BUFFER_TYPE_SHARED = 4;
public static readonly uint FF_BUFFER_TYPE_COPY = 8;
public static readonly uint FF_BUFFER_HINTS_VALID = 0x01;
public static readonly uint FF_BUFFER_HINTS_READABLE = 0x02;
public static readonly uint FF_BUFFER_HINTS_PRESERVE = 0x04;
public static readonly uint FF_BUFFER_HINTS_REUSABLE = 0x08;
public static readonly uint AV_GET_BUFFER_FLAG_REF = (1 << 0);
public static readonly uint AV_PKT_FLAG_KEY = 0x0001;
public static readonly uint AV_PKT_FLAG_CORRUPT = 0x0002;
public static readonly int FF_COMPRESSION_DEFAULT = -1;
public static readonly uint FF_ASPECT_EXTENDED = 15;
public static readonly uint FF_RC_STRATEGY_XVID = 1;
public static readonly uint FF_PRED_LEFT = 0;
public static readonly uint FF_PRED_PLANE = 1;
public static readonly uint FF_PRED_MEDIAN = 2;
public static readonly uint FF_CMP_SAD = 0;
public static readonly uint FF_CMP_SSE = 1;
public static readonly uint FF_CMP_SATD = 2;
public static readonly uint FF_CMP_DCT = 3;
public static readonly uint FF_CMP_PSNR = 4;
public static readonly uint FF_CMP_BIT = 5;
public static readonly uint FF_CMP_RD = 6;
public static readonly uint FF_CMP_ZERO = 7;
public static readonly uint FF_CMP_VSAD = 8;
public static readonly uint FF_CMP_VSSE = 9;
public static readonly uint FF_CMP_NSSE = 10;
public static readonly uint FF_CMP_W53 = 11;
public static readonly uint FF_CMP_W97 = 12;
public static readonly uint FF_CMP_DCTMAX = 13;
public static readonly uint FF_CMP_DCT264 = 14;
public static readonly uint FF_CMP_CHROMA = 256;
public static readonly uint FF_DTG_AFD_SAME = 8;
public static readonly uint FF_DTG_AFD_4_3 = 9;
public static readonly uint FF_DTG_AFD_16_9 = 10;
public static readonly uint FF_DTG_AFD_14_9 = 11;
public static readonly uint FF_DTG_AFD_4_3_SP_14_9 = 13;
public static readonly uint FF_DTG_AFD_16_9_SP_14_9 = 14;
public static readonly uint FF_DTG_AFD_SP_4_3 = 15;
public static readonly uint FF_DEFAULT_QUANT_BIAS = 999999;
public static readonly uint SLICE_FLAG_CODED_ORDER = 0x0001;
public static readonly uint SLICE_FLAG_ALLOW_FIELD = 0x0002;
public static readonly uint SLICE_FLAG_ALLOW_PLANE = 0x0004;
public static readonly uint FF_MB_DECISION_SIMPLE = 0;
public static readonly uint FF_MB_DECISION_BITS = 1;
public static readonly uint FF_MB_DECISION_RD = 2;
public static readonly uint FF_CODER_TYPE_VLC = 0;
public static readonly uint FF_CODER_TYPE_AC = 1;
public static readonly uint FF_CODER_TYPE_RAW = 2;
public static readonly uint FF_CODER_TYPE_RLE = 3;
public static readonly uint FF_CODER_TYPE_DEFLATE = 4;
public static readonly uint FF_BUG_AUTODETECT = 1;
public static readonly uint FF_BUG_OLD_MSMPEG4 = 2;
public static readonly uint FF_BUG_XVID_ILACE = 4;
public static readonly uint FF_BUG_UMP4 = 8;
public static readonly uint FF_BUG_NO_PADDING = 16;
public static readonly uint FF_BUG_AMV = 32;
public static readonly uint FF_BUG_AC_VLC = 0;
public static readonly uint FF_BUG_QPEL_CHROMA = 64;
public static readonly uint FF_BUG_STD_QPEL = 128;
public static readonly uint FF_BUG_QPEL_CHROMA2 = 256;
public static readonly uint FF_BUG_DIRECT_BLOCKSIZE = 512;
public static readonly uint FF_BUG_EDGE = 1024;
public static readonly uint FF_BUG_HPEL_CHROMA = 2048;
public static readonly uint FF_BUG_DC_CLIP = 4096;
public static readonly uint FF_BUG_MS = 8192;
public static readonly uint FF_BUG_TRUNCATED = 16384;
public static readonly uint FF_COMPLIANCE_VERY_STRICT = 2;
public static readonly uint FF_COMPLIANCE_STRICT = 1;
public static readonly uint FF_COMPLIANCE_NORMAL = 0;
public static readonly int FF_COMPLIANCE_UNOFFICIAL = -1;
public static readonly int FF_COMPLIANCE_EXPERIMENTAL = -2;
public static readonly uint FF_EC_GUESS_MVS = 1;
public static readonly uint FF_EC_DEBLOCK = 2;
public static readonly uint FF_DEBUG_PICT_INFO = 1;
public static readonly uint FF_DEBUG_RC = 2;
public static readonly uint FF_DEBUG_BITSTREAM = 4;
public static readonly uint FF_DEBUG_MB_TYPE = 8;
public static readonly uint FF_DEBUG_QP = 16;
public static readonly uint FF_DEBUG_MV = 32;
public static readonly uint FF_DEBUG_DCT_COEFF = 0x00000040;
public static readonly uint FF_DEBUG_SKIP = 0x00000080;
public static readonly uint FF_DEBUG_STARTCODE = 0x00000100;
public static readonly uint FF_DEBUG_PTS = 0x00000200;
public static readonly uint FF_DEBUG_ER = 0x00000400;
public static readonly uint FF_DEBUG_MMCO = 0x00000800;
public static readonly uint FF_DEBUG_BUGS = 0x00001000;
public static readonly uint FF_DEBUG_VIS_QP = 0x00002000;
public static readonly uint FF_DEBUG_VIS_MB_TYPE = 0x00004000;
public static readonly uint FF_DEBUG_BUFFERS = 0x00008000;
public static readonly uint FF_DEBUG_THREADS = 0x00010000;
public static readonly uint FF_DEBUG_VIS_MV_P_FOR = 0x00000001;
public static readonly uint FF_DEBUG_VIS_MV_B_FOR = 0x00000002;
public static readonly uint FF_DEBUG_VIS_MV_B_BACK = 0x00000004;
public static readonly uint AV_EF_CRCCHECK = (1<<0);
public static readonly uint AV_EF_BITSTREAM = (1<<1);
public static readonly uint AV_EF_BUFFER = (1<<2);
public static readonly uint AV_EF_EXPLODE = (1<<3);
public static readonly uint AV_EF_CAREFUL = (1<<16);
public static readonly uint AV_EF_COMPLIANT = (1<<17);
public static readonly uint AV_EF_AGGRESSIVE = (1<<18);
public static readonly uint FF_DCT_AUTO = 0;
public static readonly uint FF_DCT_FASTINT = 1;
public static readonly uint FF_DCT_INT = 2;
public static readonly uint FF_DCT_MMX = 3;
public static readonly uint FF_DCT_ALTIVEC = 5;
public static readonly uint FF_DCT_FAAN = 6;
public static readonly uint FF_IDCT_AUTO = 0;
public static readonly uint FF_IDCT_INT = 1;
public static readonly uint FF_IDCT_SIMPLE = 2;
public static readonly uint FF_IDCT_SIMPLEMMX = 3;
public static readonly uint FF_IDCT_ARM = 7;
public static readonly uint FF_IDCT_ALTIVEC = 8;
public static readonly uint FF_IDCT_SH4 = 9;
public static readonly uint FF_IDCT_SIMPLEARM = 10;
public static readonly uint FF_IDCT_IPP = 13;
public static readonly uint FF_IDCT_XVIDMMX = 14;
public static readonly uint FF_IDCT_SIMPLEARMV5TE = 16;
public static readonly uint FF_IDCT_SIMPLEARMV6 = 17;
public static readonly uint FF_IDCT_SIMPLEVIS = 18;
public static readonly uint FF_IDCT_FAAN = 20;
public static readonly uint FF_IDCT_SIMPLENEON = 22;
public static readonly uint FF_IDCT_SIMPLEALPHA = 23;
public static readonly uint FF_THREAD_FRAME = 1;
public static readonly uint FF_THREAD_SLICE = 2;
public static readonly int FF_PROFILE_UNKNOWN = -99;
public static readonly int FF_PROFILE_RESERVED = -100;
public static readonly uint FF_PROFILE_AAC_MAIN = 0;
public static readonly uint FF_PROFILE_AAC_LOW = 1;
public static readonly uint FF_PROFILE_AAC_SSR = 2;
public static readonly uint FF_PROFILE_AAC_LTP = 3;
public static readonly uint FF_PROFILE_AAC_HE = 4;
public static readonly uint FF_PROFILE_AAC_HE_V2 = 28;
public static readonly uint FF_PROFILE_AAC_LD = 22;
public static readonly uint FF_PROFILE_AAC_ELD = 38;
public static readonly uint FF_PROFILE_MPEG2_AAC_LOW = 128;
public static readonly uint FF_PROFILE_MPEG2_AAC_HE = 131;
public static readonly uint FF_PROFILE_DTS = 20;
public static readonly uint FF_PROFILE_DTS_ES = 30;
public static readonly uint FF_PROFILE_DTS_96_24 = 40;
public static readonly uint FF_PROFILE_DTS_HD_HRA = 50;
public static readonly uint FF_PROFILE_DTS_HD_MA = 60;
public static readonly uint FF_PROFILE_MPEG2_422 = 0;
public static readonly uint FF_PROFILE_MPEG2_HIGH = 1;
public static readonly uint FF_PROFILE_MPEG2_SS = 2;
public static readonly uint FF_PROFILE_MPEG2_SNR_SCALABLE = 3;
public static readonly uint FF_PROFILE_MPEG2_MAIN = 4;
public static readonly uint FF_PROFILE_MPEG2_SIMPLE = 5;
public static readonly uint FF_PROFILE_H264_CONSTRAINED = (1<<9);
public static readonly uint FF_PROFILE_H264_INTRA = (1<<11);
public static readonly uint FF_PROFILE_H264_BASELINE = 66;
public static readonly uint FF_PROFILE_H264_CONSTRAINED_BASELINE = (66|FF_PROFILE_H264_CONSTRAINED);
public static readonly uint FF_PROFILE_H264_MAIN = 77;
public static readonly uint FF_PROFILE_H264_EXTENDED = 88;
public static readonly uint FF_PROFILE_H264_HIGH = 100;
public static readonly uint FF_PROFILE_H264_HIGH_10 = 110;
public static readonly uint FF_PROFILE_H264_HIGH_10_INTRA = (110|FF_PROFILE_H264_INTRA);
public static readonly uint FF_PROFILE_H264_HIGH_422 = 122;
public static readonly uint FF_PROFILE_H264_HIGH_422_INTRA = (122|FF_PROFILE_H264_INTRA);
public static readonly uint FF_PROFILE_H264_HIGH_444 = 144;
public static readonly uint FF_PROFILE_H264_HIGH_444_PREDICTIVE = 244;
public static readonly uint FF_PROFILE_H264_HIGH_444_INTRA = (244|FF_PROFILE_H264_INTRA);
public static readonly uint FF_PROFILE_H264_CAVLC_444 = 44;
public static readonly uint FF_PROFILE_VC1_SIMPLE = 0;
public static readonly uint FF_PROFILE_VC1_MAIN = 1;
public static readonly uint FF_PROFILE_VC1_COMPLEX = 2;
public static readonly uint FF_PROFILE_VC1_ADVANCED = 3;
public static readonly uint FF_PROFILE_MPEG4_SIMPLE = 0;
public static readonly uint FF_PROFILE_MPEG4_SIMPLE_SCALABLE = 1;
public static readonly uint FF_PROFILE_MPEG4_CORE = 2;
public static readonly uint FF_PROFILE_MPEG4_MAIN = 3;
public static readonly uint FF_PROFILE_MPEG4_N_BIT = 4;
public static readonly uint FF_PROFILE_MPEG4_SCALABLE_TEXTURE = 5;
public static readonly uint FF_PROFILE_MPEG4_SIMPLE_FACE_ANIMATION = 6;
public static readonly uint FF_PROFILE_MPEG4_BASIC_ANIMATED_TEXTURE = 7;
public static readonly uint FF_PROFILE_MPEG4_HYBRID = 8;
public static readonly uint FF_PROFILE_MPEG4_ADVANCED_REAL_TIME = 9;
public static readonly uint FF_PROFILE_MPEG4_CORE_SCALABLE = 10;
public static readonly uint FF_PROFILE_MPEG4_ADVANCED_CODING = 11;
public static readonly uint FF_PROFILE_MPEG4_ADVANCED_CORE = 12;
public static readonly uint FF_PROFILE_MPEG4_ADVANCED_SCALABLE_TEXTURE = 13;
public static readonly uint FF_PROFILE_MPEG4_SIMPLE_STUDIO = 14;
public static readonly uint FF_PROFILE_MPEG4_ADVANCED_SIMPLE = 15;
public static readonly uint FF_PROFILE_JPEG2000_CSTREAM_RESTRICTION_0 = 0;
public static readonly uint FF_PROFILE_JPEG2000_CSTREAM_RESTRICTION_1 = 1;
public static readonly uint FF_PROFILE_JPEG2000_CSTREAM_NO_RESTRICTION = 2;
public static readonly uint FF_PROFILE_JPEG2000_DCINEMA_2K = 3;
public static readonly uint FF_PROFILE_JPEG2000_DCINEMA_4K = 4;
public static readonly uint FF_PROFILE_HEVC_MAIN = 1;
public static readonly uint FF_PROFILE_HEVC_MAIN_10 = 2;
public static readonly uint FF_PROFILE_HEVC_MAIN_STILL_PICTURE = 3;
public static readonly int FF_LEVEL_UNKNOWN = -99;
public static readonly int FF_SUB_CHARENC_MODE_DO_NOTHING = -1;
public static readonly uint FF_SUB_CHARENC_MODE_AUTOMATIC = 0;
public static readonly uint FF_SUB_CHARENC_MODE_PRE_DECODER = 1;
public static readonly uint AV_SUBTITLE_FLAG_FORCED = 0x00000001;
public static readonly uint AV_PARSER_PTS_NB = 4;
public static readonly uint PARSER_FLAG_COMPLETE_FRAMES = 0x0001;
public static readonly uint PARSER_FLAG_ONCE = 0x0002;
public static readonly uint PARSER_FLAG_FETCHED_OFFSET = 0x0004;
public static readonly uint PARSER_FLAG_USE_CODEC_TS = 0x1000;
public static readonly uint FF_LOSS_RESOLUTION = 0x0001;
public static readonly uint FF_LOSS_DEPTH = 0x0002;
public static readonly uint FF_LOSS_COLORSPACE = 0x0004;
public static readonly uint FF_LOSS_ALPHA = 0x0008;
public static readonly uint FF_LOSS_COLORQUANT = 0x0010;
public static readonly uint FF_LOSS_CHROMA = 0x0020;
public enum AVCodecID
{
	AV_CODEC_ID_NONE = 0,
	AV_CODEC_ID_MPEG1VIDEO = 1,
	AV_CODEC_ID_MPEG2VIDEO = 2,
	AV_CODEC_ID_MPEG2VIDEO_XVMC = 3,
	AV_CODEC_ID_H261 = 4,
	AV_CODEC_ID_H263 = 5,
	AV_CODEC_ID_RV10 = 6,
	AV_CODEC_ID_RV20 = 7,
	AV_CODEC_ID_MJPEG = 8,
	AV_CODEC_ID_MJPEGB = 9,
	AV_CODEC_ID_LJPEG = 10,
	AV_CODEC_ID_SP5X = 11,
	AV_CODEC_ID_JPEGLS = 12,
	AV_CODEC_ID_MPEG4 = 13,
	AV_CODEC_ID_RAWVIDEO = 14,
	AV_CODEC_ID_MSMPEG4V1 = 15,
	AV_CODEC_ID_MSMPEG4V2 = 16,
	AV_CODEC_ID_MSMPEG4V3 = 17,
	AV_CODEC_ID_WMV1 = 18,
	AV_CODEC_ID_WMV2 = 19,
	AV_CODEC_ID_H263P = 20,
	AV_CODEC_ID_H263I = 21,
	AV_CODEC_ID_FLV1 = 22,
	AV_CODEC_ID_SVQ1 = 23,
	AV_CODEC_ID_SVQ3 = 24,
	AV_CODEC_ID_DVVIDEO = 25,
	AV_CODEC_ID_HUFFYUV = 26,
	AV_CODEC_ID_CYUV = 27,
	AV_CODEC_ID_H264 = 28,
	AV_CODEC_ID_INDEO3 = 29,
	AV_CODEC_ID_VP3 = 30,
	AV_CODEC_ID_THEORA = 31,
	AV_CODEC_ID_ASV1 = 32,
	AV_CODEC_ID_ASV2 = 33,
	AV_CODEC_ID_FFV1 = 34,
	AV_CODEC_ID_4XM = 35,
	AV_CODEC_ID_VCR1 = 36,
	AV_CODEC_ID_CLJR = 37,
	AV_CODEC_ID_MDEC = 38,
	AV_CODEC_ID_ROQ = 39,
	AV_CODEC_ID_INTERPLAY_VIDEO = 40,
	AV_CODEC_ID_XAN_WC3 = 41,
	AV_CODEC_ID_XAN_WC4 = 42,
	AV_CODEC_ID_RPZA = 43,
	AV_CODEC_ID_CINEPAK = 44,
	AV_CODEC_ID_WS_VQA = 45,
	AV_CODEC_ID_MSRLE = 46,
	AV_CODEC_ID_MSVIDEO1 = 47,
	AV_CODEC_ID_IDCIN = 48,
	AV_CODEC_ID_8BPS = 49,
	AV_CODEC_ID_SMC = 50,
	AV_CODEC_ID_FLIC = 51,
	AV_CODEC_ID_TRUEMOTION1 = 52,
	AV_CODEC_ID_VMDVIDEO = 53,
	AV_CODEC_ID_MSZH = 54,
	AV_CODEC_ID_ZLIB = 55,
	AV_CODEC_ID_QTRLE = 56,
	AV_CODEC_ID_TSCC = 57,
	AV_CODEC_ID_ULTI = 58,
	AV_CODEC_ID_QDRAW = 59,
	AV_CODEC_ID_VIXL = 60,
	AV_CODEC_ID_QPEG = 61,
	AV_CODEC_ID_PNG = 62,
	AV_CODEC_ID_PPM = 63,
	AV_CODEC_ID_PBM = 64,
	AV_CODEC_ID_PGM = 65,
	AV_CODEC_ID_PGMYUV = 66,
	AV_CODEC_ID_PAM = 67,
	AV_CODEC_ID_FFVHUFF = 68,
	AV_CODEC_ID_RV30 = 69,
	AV_CODEC_ID_RV40 = 70,
	AV_CODEC_ID_VC1 = 71,
	AV_CODEC_ID_WMV3 = 72,
	AV_CODEC_ID_LOCO = 73,
	AV_CODEC_ID_WNV1 = 74,
	AV_CODEC_ID_AASC = 75,
	AV_CODEC_ID_INDEO2 = 76,
	AV_CODEC_ID_FRAPS = 77,
	AV_CODEC_ID_TRUEMOTION2 = 78,
	AV_CODEC_ID_BMP = 79,
	AV_CODEC_ID_CSCD = 80,
	AV_CODEC_ID_MMVIDEO = 81,
	AV_CODEC_ID_ZMBV = 82,
	AV_CODEC_ID_AVS = 83,
	AV_CODEC_ID_SMACKVIDEO = 84,
	AV_CODEC_ID_NUV = 85,
	AV_CODEC_ID_KMVC = 86,
	AV_CODEC_ID_FLASHSV = 87,
	AV_CODEC_ID_CAVS = 88,
	AV_CODEC_ID_JPEG2000 = 89,
	AV_CODEC_ID_VMNC = 90,
	AV_CODEC_ID_VP5 = 91,
	AV_CODEC_ID_VP6 = 92,
	AV_CODEC_ID_VP6F = 93,
	AV_CODEC_ID_TARGA = 94,
	AV_CODEC_ID_DSICINVIDEO = 95,
	AV_CODEC_ID_TIERTEXSEQVIDEO = 96,
	AV_CODEC_ID_TIFF = 97,
	AV_CODEC_ID_GIF = 98,
	AV_CODEC_ID_DXA = 99,
	AV_CODEC_ID_DNXHD = 100,
	AV_CODEC_ID_THP = 101,
	AV_CODEC_ID_SGI = 102,
	AV_CODEC_ID_C93 = 103,
	AV_CODEC_ID_BETHSOFTVID = 104,
	AV_CODEC_ID_PTX = 105,
	AV_CODEC_ID_TXD = 106,
	AV_CODEC_ID_VP6A = 107,
	AV_CODEC_ID_AMV = 108,
	AV_CODEC_ID_VB = 109,
	AV_CODEC_ID_PCX = 110,
	AV_CODEC_ID_SUNRAST = 111,
	AV_CODEC_ID_INDEO4 = 112,
	AV_CODEC_ID_INDEO5 = 113,
	AV_CODEC_ID_MIMIC = 114,
	AV_CODEC_ID_RL2 = 115,
	AV_CODEC_ID_ESCAPE124 = 116,
	AV_CODEC_ID_DIRAC = 117,
	AV_CODEC_ID_BFI = 118,
	AV_CODEC_ID_CMV = 119,
	AV_CODEC_ID_MOTIONPIXELS = 120,
	AV_CODEC_ID_TGV = 121,
	AV_CODEC_ID_TGQ = 122,
	AV_CODEC_ID_TQI = 123,
	AV_CODEC_ID_AURA = 124,
	AV_CODEC_ID_AURA2 = 125,
	AV_CODEC_ID_V210X = 126,
	AV_CODEC_ID_TMV = 127,
	AV_CODEC_ID_V210 = 128,
	AV_CODEC_ID_DPX = 129,
	AV_CODEC_ID_MAD = 130,
	AV_CODEC_ID_FRWU = 131,
	AV_CODEC_ID_FLASHSV2 = 132,
	AV_CODEC_ID_CDGRAPHICS = 133,
	AV_CODEC_ID_R210 = 134,
	AV_CODEC_ID_ANM = 135,
	AV_CODEC_ID_BINKVIDEO = 136,
	AV_CODEC_ID_IFF_ILBM = 137,
	AV_CODEC_ID_IFF_BYTERUN1 = 138,
	AV_CODEC_ID_KGV1 = 139,
	AV_CODEC_ID_YOP = 140,
	AV_CODEC_ID_VP8 = 141,
	AV_CODEC_ID_PICTOR = 142,
	AV_CODEC_ID_ANSI = 143,
	AV_CODEC_ID_A64_MULTI = 144,
	AV_CODEC_ID_A64_MULTI5 = 145,
	AV_CODEC_ID_R10K = 146,
	AV_CODEC_ID_MXPEG = 147,
	AV_CODEC_ID_LAGARITH = 148,
	AV_CODEC_ID_PRORES = 149,
	AV_CODEC_ID_JV = 150,
	AV_CODEC_ID_DFA = 151,
	AV_CODEC_ID_WMV3IMAGE = 152,
	AV_CODEC_ID_VC1IMAGE = 153,
	AV_CODEC_ID_UTVIDEO = 154,
	AV_CODEC_ID_BMV_VIDEO = 155,
	AV_CODEC_ID_VBLE = 156,
	AV_CODEC_ID_DXTORY = 157,
	AV_CODEC_ID_V410 = 158,
	AV_CODEC_ID_XWD = 159,
	AV_CODEC_ID_CDXL = 160,
	AV_CODEC_ID_XBM = 161,
	AV_CODEC_ID_ZEROCODEC = 162,
	AV_CODEC_ID_MSS1 = 163,
	AV_CODEC_ID_MSA1 = 164,
	AV_CODEC_ID_TSCC2 = 165,
	AV_CODEC_ID_MTS2 = 166,
	AV_CODEC_ID_CLLC = 167,
	AV_CODEC_ID_MSS2 = 168,
	AV_CODEC_ID_VP9 = 169,
	AV_CODEC_ID_AIC = 170,
	AV_CODEC_ID_ESCAPE130_DEPRECATED = 171,
	AV_CODEC_ID_G2M_DEPRECATED = 172,
	AV_CODEC_ID_WEBP_DEPRECATED = 173,
	AV_CODEC_ID_HNM4_VIDEO = 174,
	AV_CODEC_ID_HEVC_DEPRECATED = 175,
	AV_CODEC_ID_BRENDER_PIX = 1112557912,
	AV_CODEC_ID_Y41P = 1496592720,
	AV_CODEC_ID_ESCAPE130 = 1160852272,
	AV_CODEC_ID_EXR = 809850962,
	AV_CODEC_ID_AVRP = 1096176208,
	AV_CODEC_ID_012V = 808530518,
	AV_CODEC_ID_G2M = 4665933,
	AV_CODEC_ID_AVUI = 1096176969,
	AV_CODEC_ID_AYUV = 1096373590,
	AV_CODEC_ID_TARGA_Y216 = 1412575542,
	AV_CODEC_ID_V308 = 1446195256,
	AV_CODEC_ID_V408 = 1446260792,
	AV_CODEC_ID_YUV4 = 1498764852,
	AV_CODEC_ID_SANM = 1396788813,
	AV_CODEC_ID_PAF_VIDEO = 1346455126,
	AV_CODEC_ID_AVRN = 1096176238,
	AV_CODEC_ID_CPIA = 1129335105,
	AV_CODEC_ID_XFACE = 1480999235,
	AV_CODEC_ID_SGIRLE = 1397180754,
	AV_CODEC_ID_MVC1 = 1297498929,
	AV_CODEC_ID_MVC2 = 1297498930,
	AV_CODEC_ID_SNOW = 1397641047,
	AV_CODEC_ID_WEBP = 1464156752,
	AV_CODEC_ID_SMVJPEG = 1397577290,
	AV_CODEC_ID_HEVC = 1211250229,
	AV_CODEC_ID_FIRST_AUDIO = 65536,
	AV_CODEC_ID_PCM_S16LE = 65536,
	AV_CODEC_ID_PCM_S16BE = 65537,
	AV_CODEC_ID_PCM_U16LE = 65538,
	AV_CODEC_ID_PCM_U16BE = 65539,
	AV_CODEC_ID_PCM_S8 = 65540,
	AV_CODEC_ID_PCM_U8 = 65541,
	AV_CODEC_ID_PCM_MULAW = 65542,
	AV_CODEC_ID_PCM_ALAW = 65543,
	AV_CODEC_ID_PCM_S32LE = 65544,
	AV_CODEC_ID_PCM_S32BE = 65545,
	AV_CODEC_ID_PCM_U32LE = 65546,
	AV_CODEC_ID_PCM_U32BE = 65547,
	AV_CODEC_ID_PCM_S24LE = 65548,
	AV_CODEC_ID_PCM_S24BE = 65549,
	AV_CODEC_ID_PCM_U24LE = 65550,
	AV_CODEC_ID_PCM_U24BE = 65551,
	AV_CODEC_ID_PCM_S24DAUD = 65552,
	AV_CODEC_ID_PCM_ZORK = 65553,
	AV_CODEC_ID_PCM_S16LE_PLANAR = 65554,
	AV_CODEC_ID_PCM_DVD = 65555,
	AV_CODEC_ID_PCM_F32BE = 65556,
	AV_CODEC_ID_PCM_F32LE = 65557,
	AV_CODEC_ID_PCM_F64BE = 65558,
	AV_CODEC_ID_PCM_F64LE = 65559,
	AV_CODEC_ID_PCM_BLURAY = 65560,
	AV_CODEC_ID_PCM_LXF = 65561,
	AV_CODEC_ID_S302M = 65562,
	AV_CODEC_ID_PCM_S8_PLANAR = 65563,
	AV_CODEC_ID_PCM_S24LE_PLANAR_DEPRECATED = 65564,
	AV_CODEC_ID_PCM_S32LE_PLANAR_DEPRECATED = 65565,
	AV_CODEC_ID_PCM_S24LE_PLANAR = 407917392,
	AV_CODEC_ID_PCM_S32LE_PLANAR = 542135120,
	AV_CODEC_ID_PCM_S16BE_PLANAR = 1347637264,
	AV_CODEC_ID_ADPCM_IMA_QT = 69632,
	AV_CODEC_ID_ADPCM_IMA_WAV = 69633,
	AV_CODEC_ID_ADPCM_IMA_DK3 = 69634,
	AV_CODEC_ID_ADPCM_IMA_DK4 = 69635,
	AV_CODEC_ID_ADPCM_IMA_WS = 69636,
	AV_CODEC_ID_ADPCM_IMA_SMJPEG = 69637,
	AV_CODEC_ID_ADPCM_MS = 69638,
	AV_CODEC_ID_ADPCM_4XM = 69639,
	AV_CODEC_ID_ADPCM_XA = 69640,
	AV_CODEC_ID_ADPCM_ADX = 69641,
	AV_CODEC_ID_ADPCM_EA = 69642,
	AV_CODEC_ID_ADPCM_G726 = 69643,
	AV_CODEC_ID_ADPCM_CT = 69644,
	AV_CODEC_ID_ADPCM_SWF = 69645,
	AV_CODEC_ID_ADPCM_YAMAHA = 69646,
	AV_CODEC_ID_ADPCM_SBPRO_4 = 69647,
	AV_CODEC_ID_ADPCM_SBPRO_3 = 69648,
	AV_CODEC_ID_ADPCM_SBPRO_2 = 69649,
	AV_CODEC_ID_ADPCM_THP = 69650,
	AV_CODEC_ID_ADPCM_IMA_AMV = 69651,
	AV_CODEC_ID_ADPCM_EA_R1 = 69652,
	AV_CODEC_ID_ADPCM_EA_R3 = 69653,
	AV_CODEC_ID_ADPCM_EA_R2 = 69654,
	AV_CODEC_ID_ADPCM_IMA_EA_SEAD = 69655,
	AV_CODEC_ID_ADPCM_IMA_EA_EACS = 69656,
	AV_CODEC_ID_ADPCM_EA_XAS = 69657,
	AV_CODEC_ID_ADPCM_EA_MAXIS_XA = 69658,
	AV_CODEC_ID_ADPCM_IMA_ISS = 69659,
	AV_CODEC_ID_ADPCM_G722 = 69660,
	AV_CODEC_ID_ADPCM_IMA_APC = 69661,
	AV_CODEC_ID_VIMA = 1447644481,
	AV_CODEC_ID_ADPCM_AFC = 1095123744,
	AV_CODEC_ID_ADPCM_IMA_OKI = 1330333984,
	AV_CODEC_ID_ADPCM_DTK = 1146374944,
	AV_CODEC_ID_ADPCM_IMA_RAD = 1380008992,
	AV_CODEC_ID_ADPCM_G726LE = 909260615,
	AV_CODEC_ID_AMR_NB = 73728,
	AV_CODEC_ID_AMR_WB = 73729,
	AV_CODEC_ID_RA_144 = 77824,
	AV_CODEC_ID_RA_288 = 77825,
	AV_CODEC_ID_ROQ_DPCM = 81920,
	AV_CODEC_ID_INTERPLAY_DPCM = 81921,
	AV_CODEC_ID_XAN_DPCM = 81922,
	AV_CODEC_ID_SOL_DPCM = 81923,
	AV_CODEC_ID_MP2 = 86016,
	AV_CODEC_ID_MP3 = 86017,
	AV_CODEC_ID_AAC = 86018,
	AV_CODEC_ID_AC3 = 86019,
	AV_CODEC_ID_DTS = 86020,
	AV_CODEC_ID_VORBIS = 86021,
	AV_CODEC_ID_DVAUDIO = 86022,
	AV_CODEC_ID_WMAV1 = 86023,
	AV_CODEC_ID_WMAV2 = 86024,
	AV_CODEC_ID_MACE3 = 86025,
	AV_CODEC_ID_MACE6 = 86026,
	AV_CODEC_ID_VMDAUDIO = 86027,
	AV_CODEC_ID_FLAC = 86028,
	AV_CODEC_ID_MP3ADU = 86029,
	AV_CODEC_ID_MP3ON4 = 86030,
	AV_CODEC_ID_SHORTEN = 86031,
	AV_CODEC_ID_ALAC = 86032,
	AV_CODEC_ID_WESTWOOD_SND1 = 86033,
	AV_CODEC_ID_GSM = 86034,
	AV_CODEC_ID_QDM2 = 86035,
	AV_CODEC_ID_COOK = 86036,
	AV_CODEC_ID_TRUESPEECH = 86037,
	AV_CODEC_ID_TTA = 86038,
	AV_CODEC_ID_SMACKAUDIO = 86039,
	AV_CODEC_ID_QCELP = 86040,
	AV_CODEC_ID_WAVPACK = 86041,
	AV_CODEC_ID_DSICINAUDIO = 86042,
	AV_CODEC_ID_IMC = 86043,
	AV_CODEC_ID_MUSEPACK7 = 86044,
	AV_CODEC_ID_MLP = 86045,
	AV_CODEC_ID_GSM_MS = 86046,
	AV_CODEC_ID_ATRAC3 = 86047,
	AV_CODEC_ID_VOXWARE = 86048,
	AV_CODEC_ID_APE = 86049,
	AV_CODEC_ID_NELLYMOSER = 86050,
	AV_CODEC_ID_MUSEPACK8 = 86051,
	AV_CODEC_ID_SPEEX = 86052,
	AV_CODEC_ID_WMAVOICE = 86053,
	AV_CODEC_ID_WMAPRO = 86054,
	AV_CODEC_ID_WMALOSSLESS = 86055,
	AV_CODEC_ID_ATRAC3P = 86056,
	AV_CODEC_ID_EAC3 = 86057,
	AV_CODEC_ID_SIPR = 86058,
	AV_CODEC_ID_MP1 = 86059,
	AV_CODEC_ID_TWINVQ = 86060,
	AV_CODEC_ID_TRUEHD = 86061,
	AV_CODEC_ID_MP4ALS = 86062,
	AV_CODEC_ID_ATRAC1 = 86063,
	AV_CODEC_ID_BINKAUDIO_RDFT = 86064,
	AV_CODEC_ID_BINKAUDIO_DCT = 86065,
	AV_CODEC_ID_AAC_LATM = 86066,
	AV_CODEC_ID_QDMC = 86067,
	AV_CODEC_ID_CELT = 86068,
	AV_CODEC_ID_G723_1 = 86069,
	AV_CODEC_ID_G729 = 86070,
	AV_CODEC_ID_8SVX_EXP = 86071,
	AV_CODEC_ID_8SVX_FIB = 86072,
	AV_CODEC_ID_BMV_AUDIO = 86073,
	AV_CODEC_ID_RALF = 86074,
	AV_CODEC_ID_IAC = 86075,
	AV_CODEC_ID_ILBC = 86076,
	AV_CODEC_ID_OPUS_DEPRECATED = 86077,
	AV_CODEC_ID_COMFORT_NOISE = 86078,
	AV_CODEC_ID_TAK_DEPRECATED = 86079,
	AV_CODEC_ID_METASOUND = 86080,
	AV_CODEC_ID_FFWAVESYNTH = 1179014995,
	AV_CODEC_ID_SONIC = 1397706307,
	AV_CODEC_ID_SONIC_LS = 1397706316,
	AV_CODEC_ID_PAF_AUDIO = 1346455105,
	AV_CODEC_ID_OPUS = 1330664787,
	AV_CODEC_ID_TAK = 1950507339,
	AV_CODEC_ID_EVRC = 1936029283,
	AV_CODEC_ID_SMV = 1936944502,
	AV_CODEC_ID_FIRST_SUBTITLE = 94208,
	AV_CODEC_ID_DVD_SUBTITLE = 94208,
	AV_CODEC_ID_DVB_SUBTITLE = 94209,
	AV_CODEC_ID_TEXT = 94210,
	AV_CODEC_ID_XSUB = 94211,
	AV_CODEC_ID_SSA = 94212,
	AV_CODEC_ID_MOV_TEXT = 94213,
	AV_CODEC_ID_HDMV_PGS_SUBTITLE = 94214,
	AV_CODEC_ID_DVB_TELETEXT = 94215,
	AV_CODEC_ID_SRT = 94216,
	AV_CODEC_ID_MICRODVD = 1833195076,
	AV_CODEC_ID_EIA_608 = 1664495672,
	AV_CODEC_ID_JACOSUB = 1246975298,
	AV_CODEC_ID_SAMI = 1396788553,
	AV_CODEC_ID_REALTEXT = 1381259348,
	AV_CODEC_ID_SUBVIEWER1 = 1398953521,
	AV_CODEC_ID_SUBVIEWER = 1400201814,
	AV_CODEC_ID_SUBRIP = 1397909872,
	AV_CODEC_ID_WEBVTT = 1465275476,
	AV_CODEC_ID_MPL2 = 1297108018,
	AV_CODEC_ID_VPLAYER = 1448111218,
	AV_CODEC_ID_PJS = 1349012051,
	AV_CODEC_ID_ASS = 1095979808,
	AV_CODEC_ID_FIRST_UNKNOWN = 98304,
	AV_CODEC_ID_TTF = 98304,
	AV_CODEC_ID_BINTEXT = 1112823892,
	AV_CODEC_ID_XBIN = 1480739150,
	AV_CODEC_ID_IDF = 4801606,
	AV_CODEC_ID_OTF = 5198918,
	AV_CODEC_ID_SMPTE_KLV = 1263294017,
	AV_CODEC_ID_DVD_NAV = 1145979222,
	AV_CODEC_ID_TIMED_ID3 = 1414087731,
	AV_CODEC_ID_PROBE = 102400,
	AV_CODEC_ID_MPEG2TS = 131072,
	AV_CODEC_ID_MPEG4SYSTEMS = 131073,
	AV_CODEC_ID_FFMETADATA = 135168,
	CODEC_ID_NONE = 0,
	CODEC_ID_MPEG1VIDEO = 1,
	CODEC_ID_MPEG2VIDEO = 2,
	CODEC_ID_MPEG2VIDEO_XVMC = 3,
	CODEC_ID_H261 = 4,
	CODEC_ID_H263 = 5,
	CODEC_ID_RV10 = 6,
	CODEC_ID_RV20 = 7,
	CODEC_ID_MJPEG = 8,
	CODEC_ID_MJPEGB = 9,
	CODEC_ID_LJPEG = 10,
	CODEC_ID_SP5X = 11,
	CODEC_ID_JPEGLS = 12,
	CODEC_ID_MPEG4 = 13,
	CODEC_ID_RAWVIDEO = 14,
	CODEC_ID_MSMPEG4V1 = 15,
	CODEC_ID_MSMPEG4V2 = 16,
	CODEC_ID_MSMPEG4V3 = 17,
	CODEC_ID_WMV1 = 18,
	CODEC_ID_WMV2 = 19,
	CODEC_ID_H263P = 20,
	CODEC_ID_H263I = 21,
	CODEC_ID_FLV1 = 22,
	CODEC_ID_SVQ1 = 23,
	CODEC_ID_SVQ3 = 24,
	CODEC_ID_DVVIDEO = 25,
	CODEC_ID_HUFFYUV = 26,
	CODEC_ID_CYUV = 27,
	CODEC_ID_H264 = 28,
	CODEC_ID_INDEO3 = 29,
	CODEC_ID_VP3 = 30,
	CODEC_ID_THEORA = 31,
	CODEC_ID_ASV1 = 32,
	CODEC_ID_ASV2 = 33,
	CODEC_ID_FFV1 = 34,
	CODEC_ID_4XM = 35,
	CODEC_ID_VCR1 = 36,
	CODEC_ID_CLJR = 37,
	CODEC_ID_MDEC = 38,
	CODEC_ID_ROQ = 39,
	CODEC_ID_INTERPLAY_VIDEO = 40,
	CODEC_ID_XAN_WC3 = 41,
	CODEC_ID_XAN_WC4 = 42,
	CODEC_ID_RPZA = 43,
	CODEC_ID_CINEPAK = 44,
	CODEC_ID_WS_VQA = 45,
	CODEC_ID_MSRLE = 46,
	CODEC_ID_MSVIDEO1 = 47,
	CODEC_ID_IDCIN = 48,
	CODEC_ID_8BPS = 49,
	CODEC_ID_SMC = 50,
	CODEC_ID_FLIC = 51,
	CODEC_ID_TRUEMOTION1 = 52,
	CODEC_ID_VMDVIDEO = 53,
	CODEC_ID_MSZH = 54,
	CODEC_ID_ZLIB = 55,
	CODEC_ID_QTRLE = 56,
	CODEC_ID_TSCC = 57,
	CODEC_ID_ULTI = 58,
	CODEC_ID_QDRAW = 59,
	CODEC_ID_VIXL = 60,
	CODEC_ID_QPEG = 61,
	CODEC_ID_PNG = 62,
	CODEC_ID_PPM = 63,
	CODEC_ID_PBM = 64,
	CODEC_ID_PGM = 65,
	CODEC_ID_PGMYUV = 66,
	CODEC_ID_PAM = 67,
	CODEC_ID_FFVHUFF = 68,
	CODEC_ID_RV30 = 69,
	CODEC_ID_RV40 = 70,
	CODEC_ID_VC1 = 71,
	CODEC_ID_WMV3 = 72,
	CODEC_ID_LOCO = 73,
	CODEC_ID_WNV1 = 74,
	CODEC_ID_AASC = 75,
	CODEC_ID_INDEO2 = 76,
	CODEC_ID_FRAPS = 77,
	CODEC_ID_TRUEMOTION2 = 78,
	CODEC_ID_BMP = 79,
	CODEC_ID_CSCD = 80,
	CODEC_ID_MMVIDEO = 81,
	CODEC_ID_ZMBV = 82,
	CODEC_ID_AVS = 83,
	CODEC_ID_SMACKVIDEO = 84,
	CODEC_ID_NUV = 85,
	CODEC_ID_KMVC = 86,
	CODEC_ID_FLASHSV = 87,
	CODEC_ID_CAVS = 88,
	CODEC_ID_JPEG2000 = 89,
	CODEC_ID_VMNC = 90,
	CODEC_ID_VP5 = 91,
	CODEC_ID_VP6 = 92,
	CODEC_ID_VP6F = 93,
	CODEC_ID_TARGA = 94,
	CODEC_ID_DSICINVIDEO = 95,
	CODEC_ID_TIERTEXSEQVIDEO = 96,
	CODEC_ID_TIFF = 97,
	CODEC_ID_GIF = 98,
	CODEC_ID_DXA = 99,
	CODEC_ID_DNXHD = 100,
	CODEC_ID_THP = 101,
	CODEC_ID_SGI = 102,
	CODEC_ID_C93 = 103,
	CODEC_ID_BETHSOFTVID = 104,
	CODEC_ID_PTX = 105,
	CODEC_ID_TXD = 106,
	CODEC_ID_VP6A = 107,
	CODEC_ID_AMV = 108,
	CODEC_ID_VB = 109,
	CODEC_ID_PCX = 110,
	CODEC_ID_SUNRAST = 111,
	CODEC_ID_INDEO4 = 112,
	CODEC_ID_INDEO5 = 113,
	CODEC_ID_MIMIC = 114,
	CODEC_ID_RL2 = 115,
	CODEC_ID_ESCAPE124 = 116,
	CODEC_ID_DIRAC = 117,
	CODEC_ID_BFI = 118,
	CODEC_ID_CMV = 119,
	CODEC_ID_MOTIONPIXELS = 120,
	CODEC_ID_TGV = 121,
	CODEC_ID_TGQ = 122,
	CODEC_ID_TQI = 123,
	CODEC_ID_AURA = 124,
	CODEC_ID_AURA2 = 125,
	CODEC_ID_V210X = 126,
	CODEC_ID_TMV = 127,
	CODEC_ID_V210 = 128,
	CODEC_ID_DPX = 129,
	CODEC_ID_MAD = 130,
	CODEC_ID_FRWU = 131,
	CODEC_ID_FLASHSV2 = 132,
	CODEC_ID_CDGRAPHICS = 133,
	CODEC_ID_R210 = 134,
	CODEC_ID_ANM = 135,
	CODEC_ID_BINKVIDEO = 136,
	CODEC_ID_IFF_ILBM = 137,
	CODEC_ID_IFF_BYTERUN1 = 138,
	CODEC_ID_KGV1 = 139,
	CODEC_ID_YOP = 140,
	CODEC_ID_VP8 = 141,
	CODEC_ID_PICTOR = 142,
	CODEC_ID_ANSI = 143,
	CODEC_ID_A64_MULTI = 144,
	CODEC_ID_A64_MULTI5 = 145,
	CODEC_ID_R10K = 146,
	CODEC_ID_MXPEG = 147,
	CODEC_ID_LAGARITH = 148,
	CODEC_ID_PRORES = 149,
	CODEC_ID_JV = 150,
	CODEC_ID_DFA = 151,
	CODEC_ID_WMV3IMAGE = 152,
	CODEC_ID_VC1IMAGE = 153,
	CODEC_ID_UTVIDEO = 154,
	CODEC_ID_BMV_VIDEO = 155,
	CODEC_ID_VBLE = 156,
	CODEC_ID_DXTORY = 157,
	CODEC_ID_V410 = 158,
	CODEC_ID_XWD = 159,
	CODEC_ID_CDXL = 160,
	CODEC_ID_XBM = 161,
	CODEC_ID_ZEROCODEC = 162,
	CODEC_ID_MSS1 = 163,
	CODEC_ID_MSA1 = 164,
	CODEC_ID_TSCC2 = 165,
	CODEC_ID_MTS2 = 166,
	CODEC_ID_CLLC = 167,
	CODEC_ID_Y41P = 1496592720,
	CODEC_ID_ESCAPE130 = 1160852272,
	CODEC_ID_EXR = 809850962,
	CODEC_ID_AVRP = 1096176208,
	CODEC_ID_G2M = 4665933,
	CODEC_ID_AVUI = 1096176969,
	CODEC_ID_AYUV = 1096373590,
	CODEC_ID_V308 = 1446195256,
	CODEC_ID_V408 = 1446260792,
	CODEC_ID_YUV4 = 1498764852,
	CODEC_ID_SANM = 1396788813,
	CODEC_ID_PAF_VIDEO = 1346455126,
	CODEC_ID_SNOW = 1397641047,
	CODEC_ID_FIRST_AUDIO = 65536,
	CODEC_ID_PCM_S16LE = 65536,
	CODEC_ID_PCM_S16BE = 65537,
	CODEC_ID_PCM_U16LE = 65538,
	CODEC_ID_PCM_U16BE = 65539,
	CODEC_ID_PCM_S8 = 65540,
	CODEC_ID_PCM_U8 = 65541,
	CODEC_ID_PCM_MULAW = 65542,
	CODEC_ID_PCM_ALAW = 65543,
	CODEC_ID_PCM_S32LE = 65544,
	CODEC_ID_PCM_S32BE = 65545,
	CODEC_ID_PCM_U32LE = 65546,
	CODEC_ID_PCM_U32BE = 65547,
	CODEC_ID_PCM_S24LE = 65548,
	CODEC_ID_PCM_S24BE = 65549,
	CODEC_ID_PCM_U24LE = 65550,
	CODEC_ID_PCM_U24BE = 65551,
	CODEC_ID_PCM_S24DAUD = 65552,
	CODEC_ID_PCM_ZORK = 65553,
	CODEC_ID_PCM_S16LE_PLANAR = 65554,
	CODEC_ID_PCM_DVD = 65555,
	CODEC_ID_PCM_F32BE = 65556,
	CODEC_ID_PCM_F32LE = 65557,
	CODEC_ID_PCM_F64BE = 65558,
	CODEC_ID_PCM_F64LE = 65559,
	CODEC_ID_PCM_BLURAY = 65560,
	CODEC_ID_PCM_LXF = 65561,
	CODEC_ID_S302M = 65562,
	CODEC_ID_PCM_S8_PLANAR = 65563,
	CODEC_ID_ADPCM_IMA_QT = 69632,
	CODEC_ID_ADPCM_IMA_WAV = 69633,
	CODEC_ID_ADPCM_IMA_DK3 = 69634,
	CODEC_ID_ADPCM_IMA_DK4 = 69635,
	CODEC_ID_ADPCM_IMA_WS = 69636,
	CODEC_ID_ADPCM_IMA_SMJPEG = 69637,
	CODEC_ID_ADPCM_MS = 69638,
	CODEC_ID_ADPCM_4XM = 69639,
	CODEC_ID_ADPCM_XA = 69640,
	CODEC_ID_ADPCM_ADX = 69641,
	CODEC_ID_ADPCM_EA = 69642,
	CODEC_ID_ADPCM_G726 = 69643,
	CODEC_ID_ADPCM_CT = 69644,
	CODEC_ID_ADPCM_SWF = 69645,
	CODEC_ID_ADPCM_YAMAHA = 69646,
	CODEC_ID_ADPCM_SBPRO_4 = 69647,
	CODEC_ID_ADPCM_SBPRO_3 = 69648,
	CODEC_ID_ADPCM_SBPRO_2 = 69649,
	CODEC_ID_ADPCM_THP = 69650,
	CODEC_ID_ADPCM_IMA_AMV = 69651,
	CODEC_ID_ADPCM_EA_R1 = 69652,
	CODEC_ID_ADPCM_EA_R3 = 69653,
	CODEC_ID_ADPCM_EA_R2 = 69654,
	CODEC_ID_ADPCM_IMA_EA_SEAD = 69655,
	CODEC_ID_ADPCM_IMA_EA_EACS = 69656,
	CODEC_ID_ADPCM_EA_XAS = 69657,
	CODEC_ID_ADPCM_EA_MAXIS_XA = 69658,
	CODEC_ID_ADPCM_IMA_ISS = 69659,
	CODEC_ID_ADPCM_G722 = 69660,
	CODEC_ID_ADPCM_IMA_APC = 69661,
	CODEC_ID_VIMA = 1447644481,
	CODEC_ID_AMR_NB = 73728,
	CODEC_ID_AMR_WB = 73729,
	CODEC_ID_RA_144 = 77824,
	CODEC_ID_RA_288 = 77825,
	CODEC_ID_ROQ_DPCM = 81920,
	CODEC_ID_INTERPLAY_DPCM = 81921,
	CODEC_ID_XAN_DPCM = 81922,
	CODEC_ID_SOL_DPCM = 81923,
	CODEC_ID_MP2 = 86016,
	CODEC_ID_MP3 = 86017,
	CODEC_ID_AAC = 86018,
	CODEC_ID_AC3 = 86019,
	CODEC_ID_DTS = 86020,
	CODEC_ID_VORBIS = 86021,
	CODEC_ID_DVAUDIO = 86022,
	CODEC_ID_WMAV1 = 86023,
	CODEC_ID_WMAV2 = 86024,
	CODEC_ID_MACE3 = 86025,
	CODEC_ID_MACE6 = 86026,
	CODEC_ID_VMDAUDIO = 86027,
	CODEC_ID_FLAC = 86028,
	CODEC_ID_MP3ADU = 86029,
	CODEC_ID_MP3ON4 = 86030,
	CODEC_ID_SHORTEN = 86031,
	CODEC_ID_ALAC = 86032,
	CODEC_ID_WESTWOOD_SND1 = 86033,
	CODEC_ID_GSM = 86034,
	CODEC_ID_QDM2 = 86035,
	CODEC_ID_COOK = 86036,
	CODEC_ID_TRUESPEECH = 86037,
	CODEC_ID_TTA = 86038,
	CODEC_ID_SMACKAUDIO = 86039,
	CODEC_ID_QCELP = 86040,
	CODEC_ID_WAVPACK = 86041,
	CODEC_ID_DSICINAUDIO = 86042,
	CODEC_ID_IMC = 86043,
	CODEC_ID_MUSEPACK7 = 86044,
	CODEC_ID_MLP = 86045,
	CODEC_ID_GSM_MS = 86046,
	CODEC_ID_ATRAC3 = 86047,
	CODEC_ID_VOXWARE = 86048,
	CODEC_ID_APE = 86049,
	CODEC_ID_NELLYMOSER = 86050,
	CODEC_ID_MUSEPACK8 = 86051,
	CODEC_ID_SPEEX = 86052,
	CODEC_ID_WMAVOICE = 86053,
	CODEC_ID_WMAPRO = 86054,
	CODEC_ID_WMALOSSLESS = 86055,
	CODEC_ID_ATRAC3P = 86056,
	CODEC_ID_EAC3 = 86057,
	CODEC_ID_SIPR = 86058,
	CODEC_ID_MP1 = 86059,
	CODEC_ID_TWINVQ = 86060,
	CODEC_ID_TRUEHD = 86061,
	CODEC_ID_MP4ALS = 86062,
	CODEC_ID_ATRAC1 = 86063,
	CODEC_ID_BINKAUDIO_RDFT = 86064,
	CODEC_ID_BINKAUDIO_DCT = 86065,
	CODEC_ID_AAC_LATM = 86066,
	CODEC_ID_QDMC = 86067,
	CODEC_ID_CELT = 86068,
	CODEC_ID_G723_1 = 86069,
	CODEC_ID_G729 = 86070,
	CODEC_ID_8SVX_EXP = 86071,
	CODEC_ID_8SVX_FIB = 86072,
	CODEC_ID_BMV_AUDIO = 86073,
	CODEC_ID_RALF = 86074,
	CODEC_ID_IAC = 86075,
	CODEC_ID_ILBC = 86076,
	CODEC_ID_FFWAVESYNTH = 1179014995,
	CODEC_ID_SONIC = 1397706307,
	CODEC_ID_SONIC_LS = 1397706316,
	CODEC_ID_PAF_AUDIO = 1346455105,
	CODEC_ID_OPUS = 1330664787,
	CODEC_ID_FIRST_SUBTITLE = 94208,
	CODEC_ID_DVD_SUBTITLE = 94208,
	CODEC_ID_DVB_SUBTITLE = 94209,
	CODEC_ID_TEXT = 94210,
	CODEC_ID_XSUB = 94211,
	CODEC_ID_SSA = 94212,
	CODEC_ID_MOV_TEXT = 94213,
	CODEC_ID_HDMV_PGS_SUBTITLE = 94214,
	CODEC_ID_DVB_TELETEXT = 94215,
	CODEC_ID_SRT = 94216,
	CODEC_ID_MICRODVD = 1833195076,
	CODEC_ID_EIA_608 = 1664495672,
	CODEC_ID_JACOSUB = 1246975298,
	CODEC_ID_SAMI = 1396788553,
	CODEC_ID_REALTEXT = 1381259348,
	CODEC_ID_SUBVIEWER = 1400201814,
	CODEC_ID_FIRST_UNKNOWN = 98304,
	CODEC_ID_TTF = 98304,
	CODEC_ID_BINTEXT = 1112823892,
	CODEC_ID_XBIN = 1480739150,
	CODEC_ID_IDF = 4801606,
	CODEC_ID_OTF = 5198918,
	CODEC_ID_PROBE = 102400,
	CODEC_ID_MPEG2TS = 131072,
	CODEC_ID_MPEG4SYSTEMS = 131073,
	CODEC_ID_FFMETADATA = 135168,
}

public enum AVSubtitleType
{
	SUBTITLE_NONE = 0,
	SUBTITLE_BITMAP = 1,
	SUBTITLE_TEXT = 2,
	SUBTITLE_ASS = 3,
}

public enum AVPacketSideDataType
{
	AV_PKT_DATA_PALETTE = 0,
	AV_PKT_DATA_NEW_EXTRADATA = 1,
	AV_PKT_DATA_PARAM_CHANGE = 2,
	AV_PKT_DATA_H263_MB_INFO = 3,
	AV_PKT_DATA_SKIP_SAMPLES = 70,
	AV_PKT_DATA_JP_DUALMONO = 71,
	AV_PKT_DATA_STRINGS_METADATA = 72,
	AV_PKT_DATA_SUBTITLE_POSITION = 73,
	AV_PKT_DATA_MATROSKA_BLOCKADDITIONAL = 74,
	AV_PKT_DATA_WEBVTT_IDENTIFIER = 75,
	AV_PKT_DATA_WEBVTT_SETTINGS = 76,
	AV_PKT_DATA_METADATA_UPDATE = 77,
}

public enum AVColorPrimaries
{
	AVCOL_PRI_BT709 = 1,
	AVCOL_PRI_UNSPECIFIED = 2,
	AVCOL_PRI_BT470M = 4,
	AVCOL_PRI_BT470BG = 5,
	AVCOL_PRI_SMPTE170M = 6,
	AVCOL_PRI_SMPTE240M = 7,
	AVCOL_PRI_FILM = 8,
	AVCOL_PRI_BT2020 = 9,
	AVCOL_PRI_NB = 10,
}

public enum AVColorTransferCharacteristic
{
	AVCOL_TRC_BT709 = 1,
	AVCOL_TRC_UNSPECIFIED = 2,
	AVCOL_TRC_GAMMA22 = 4,
	AVCOL_TRC_GAMMA28 = 5,
	AVCOL_TRC_SMPTE170M = 6,
	AVCOL_TRC_SMPTE240M = 7,
	AVCOL_TRC_LINEAR = 8,
	AVCOL_TRC_LOG = 9,
	AVCOL_TRC_LOG_SQRT = 10,
	AVCOL_TRC_IEC61966_2_4 = 11,
	AVCOL_TRC_BT1361_ECG = 12,
	AVCOL_TRC_IEC61966_2_1 = 13,
	AVCOL_TRC_BT2020_10 = 14,
	AVCOL_TRC_BT2020_12 = 15,
	AVCOL_TRC_NB = 16,
}

public enum AVChromaLocation
{
	AVCHROMA_LOC_UNSPECIFIED = 0,
	AVCHROMA_LOC_LEFT = 1,
	AVCHROMA_LOC_CENTER = 2,
	AVCHROMA_LOC_TOPLEFT = 3,
	AVCHROMA_LOC_TOP = 4,
	AVCHROMA_LOC_BOTTOMLEFT = 5,
	AVCHROMA_LOC_BOTTOM = 6,
	AVCHROMA_LOC_NB = 7,
}

public enum AVFieldOrder
{
	AV_FIELD_UNKNOWN = 0,
	AV_FIELD_PROGRESSIVE = 1,
	AV_FIELD_TT = 2,
	AV_FIELD_BB = 3,
	AV_FIELD_TB = 4,
	AV_FIELD_BT = 5,
}

public enum AVAudioServiceType
{
	AV_AUDIO_SERVICE_TYPE_MAIN = 0,
	AV_AUDIO_SERVICE_TYPE_EFFECTS = 1,
	AV_AUDIO_SERVICE_TYPE_VISUALLY_IMPAIRED = 2,
	AV_AUDIO_SERVICE_TYPE_HEARING_IMPAIRED = 3,
	AV_AUDIO_SERVICE_TYPE_DIALOGUE = 4,
	AV_AUDIO_SERVICE_TYPE_COMMENTARY = 5,
	AV_AUDIO_SERVICE_TYPE_EMERGENCY = 6,
	AV_AUDIO_SERVICE_TYPE_VOICE_OVER = 7,
	AV_AUDIO_SERVICE_TYPE_KARAOKE = 8,
	AV_AUDIO_SERVICE_TYPE_NB = 9,
}

public enum AVDiscard
{
	AVDISCARD_NONE = -1,
	AVDISCARD_DEFAULT = 0,
	AVDISCARD_NONREF = 8,
	AVDISCARD_BIDIR = 16,
	AVDISCARD_NONKEY = 32,
	AVDISCARD_ALL = 48,
}

public enum Motion_Est_ID
{
	ME_ZERO = 1,
	ME_FULL = 2,
	ME_LOG = 3,
	ME_PHODS = 4,
	ME_EPZS = 5,
	ME_X1 = 6,
	ME_HEX = 7,
	ME_UMH = 8,
	ME_TESA = 9,
	ME_ITER = 50,
}

public enum AVSideDataParamChangeFlags
{
	AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_COUNT = 1,
	AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_LAYOUT = 2,
	AV_SIDE_DATA_PARAM_CHANGE_SAMPLE_RATE = 4,
	AV_SIDE_DATA_PARAM_CHANGE_DIMENSIONS = 8,
}

public enum AVPictureStructure
{
	AV_PICTURE_STRUCTURE_UNKNOWN = 0,
	AV_PICTURE_STRUCTURE_TOP_FIELD = 1,
	AV_PICTURE_STRUCTURE_BOTTOM_FIELD = 2,
	AV_PICTURE_STRUCTURE_FRAME = 3,
}

public enum AVLockOp
{
	AV_LOCK_CREATE = 0,
	AV_LOCK_OBTAIN = 1,
	AV_LOCK_RELEASE = 2,
	AV_LOCK_DESTROY = 3,
}

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public  static extern AVRational av_codec_get_pkt_timebase(
	IntPtr/* AVCodecContext*  */ avctx);


[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern void av_codec_set_pkt_timebase(
	IntPtr/* AVCodecContext*  */ avctx, 
	AVRational val);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern IntPtr/* AVCodecDescriptor*  */ av_codec_get_codec_descriptor(
	IntPtr/* AVCodecContext*  */ avctx);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern void av_codec_set_codec_descriptor(
	IntPtr/* AVCodecContext*  */ avctx, 
	IntPtr/* AVCodecDescriptor*  */ desc);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 av_codec_get_lowres(
	IntPtr/* AVCodecContext*  */ avctx);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern void av_codec_set_lowres(
	IntPtr/* AVCodecContext*  */ avctx, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 val);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 av_codec_get_seek_preroll(
	IntPtr/* AVCodecContext*  */ avctx);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern void av_codec_set_seek_preroll(
	IntPtr/* AVCodecContext*  */ avctx, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 val);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 av_codec_get_max_lowres(
	IntPtr/* AVCodec*  */ codec);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern IntPtr/* AVCodec*  */ av_codec_next(
	IntPtr/* AVCodec*  */ c);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.UInt32 avcodec_version(
);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern string avcodec_configuration(
);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern string avcodec_license(
);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern void avcodec_register(
	IntPtr/* AVCodec*  */ codec);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern void avcodec_register_all(
);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern IntPtr/* AVCodecContext*  */ avcodec_alloc_context3(
	IntPtr/* AVCodec*  */ codec);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 avcodec_get_context_defaults3(
	IntPtr/* AVCodecContext*  */ s, 
	IntPtr/* AVCodec*  */ codec);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern IntPtr/* AVClass*  */ avcodec_get_class(
);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern IntPtr/* AVClass*  */ avcodec_get_frame_class(
);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern IntPtr/* AVClass*  */ avcodec_get_subtitle_rect_class(
);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 avcodec_copy_context(
	IntPtr/* AVCodecContext*  */ dest, 
	IntPtr/* AVCodecContext*  */ src);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern IntPtr/* AVFrame*  */ avcodec_alloc_frame(
);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern void avcodec_get_frame_defaults(
	IntPtr/* AVFrame*  */ frame);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern void avcodec_free_frame(
	IntPtr/* IntPtr*  */ frame);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 avcodec_open2(
	IntPtr/* AVCodecContext*  */ avctx, 
	IntPtr/* AVCodec*  */ codec, 
	IntPtr/* IntPtr*  */ options);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 avcodec_close(
	IntPtr/* AVCodecContext*  */ avctx);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern void avsubtitle_free(
	IntPtr/* AVSubtitle*  */ sub);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern void av_destruct_packet(
	IntPtr/* AVPacket*  */ pkt);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern void av_init_packet(
	IntPtr/* AVPacket*  */ pkt);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 av_new_packet(
	IntPtr/* AVPacket*  */ pkt, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 size);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern void av_shrink_packet(
	IntPtr/* AVPacket*  */ pkt, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 size);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 av_grow_packet(
	IntPtr/* AVPacket*  */ pkt, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 grow_by);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 av_packet_from_data(
	IntPtr/* AVPacket*  */ pkt, 
	IntPtr/* System.Byte*  */ data, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 size);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 av_dup_packet(
	IntPtr/* AVPacket*  */ pkt);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 av_copy_packet(
	IntPtr/* AVPacket*  */ dst, 
	IntPtr/* AVPacket*  */ src);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 av_copy_packet_side_data(
	IntPtr/* AVPacket*  */ dst, 
	IntPtr/* AVPacket*  */ src);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern void av_free_packet(
	IntPtr/* AVPacket*  */ pkt);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern IntPtr/* System.Byte*  */ av_packet_new_side_data(
	IntPtr/* AVPacket*  */ pkt, 
	AVPacketSideDataType type, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 size);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 av_packet_shrink_side_data(
	IntPtr/* AVPacket*  */ pkt, 
	AVPacketSideDataType type, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 size);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern IntPtr/* System.Byte*  */ av_packet_get_side_data(
	IntPtr/* AVPacket*  */ pkt, 
	AVPacketSideDataType type, 
	IntPtr/* System.Int32*  */ size);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 av_packet_merge_side_data(
	IntPtr/* AVPacket*  */ pkt);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 av_packet_split_side_data(
	IntPtr/* AVPacket*  */ pkt);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern IntPtr/* System.Byte*  */ av_packet_pack_dictionary(
	IntPtr/* AVDictionary*  */ dict, 
	IntPtr/* System.Int32*  */ size);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 av_packet_unpack_dictionary(
	IntPtr/* System.Byte*  */ data, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 size, 
	IntPtr/* IntPtr*  */ dict);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern void av_packet_free_side_data(
	IntPtr/* AVPacket*  */ pkt);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 av_packet_ref(
	IntPtr/* AVPacket*  */ dst, 
	IntPtr/* AVPacket*  */ src);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern void av_packet_unref(
	IntPtr/* AVPacket*  */ pkt);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern void av_packet_move_ref(
	IntPtr/* AVPacket*  */ dst, 
	IntPtr/* AVPacket*  */ src);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 av_packet_copy_props(
	IntPtr/* AVPacket*  */ dst, 
	IntPtr/* AVPacket*  */ src);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern IntPtr/* AVCodec*  */ avcodec_find_decoder(
	AVCodecID id);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern IntPtr/* AVCodec*  */ avcodec_find_decoder_by_name(
	[MarshalAs(UnmanagedType.LPStr)]
	string name);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 avcodec_default_get_buffer(
	IntPtr/* AVCodecContext*  */ s, 
	IntPtr/* AVFrame*  */ pic);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern void avcodec_default_release_buffer(
	IntPtr/* AVCodecContext*  */ s, 
	IntPtr/* AVFrame*  */ pic);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 avcodec_default_reget_buffer(
	IntPtr/* AVCodecContext*  */ s, 
	IntPtr/* AVFrame*  */ pic);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 avcodec_default_get_buffer2(
	IntPtr/* AVCodecContext*  */ s, 
	IntPtr/* AVFrame*  */ frame, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 flags);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.UInt32 avcodec_get_edge_width(
);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern void avcodec_align_dimensions(
	IntPtr/* AVCodecContext*  */ s, 
	IntPtr/* System.Int32*  */ width, 
	IntPtr/* System.Int32*  */ height);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern void avcodec_align_dimensions2(
	IntPtr/* AVCodecContext*  */ s, 
	IntPtr/* System.Int32*  */ width, 
	IntPtr/* System.Int32*  */ height, 
	IntPtr linesize_align);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 avcodec_enum_to_chroma_pos(
	IntPtr/* System.Int32*  */ xpos, 
	IntPtr/* System.Int32*  */ ypos, 
	AVChromaLocation pos);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern AVChromaLocation avcodec_chroma_pos_to_enum(
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 xpos, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 ypos);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 avcodec_decode_audio3(
	IntPtr/* AVCodecContext*  */ avctx, 
	IntPtr/* System.Int16*  */ samples, 
	out int /* System.Int32*  */ frame_size_ptr, 
	IntPtr/* AVPacket*  */ avpkt);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 avcodec_decode_audio4(
	IntPtr/* AVCodecContext*  */ avctx, 
	IntPtr/* AVFrame*  */ frame, 
	out int/* System.Int32*  */ got_frame_ptr, 
	IntPtr/* AVPacket*  */ avpkt);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 avcodec_decode_video2(
	IntPtr/* AVCodecContext*  */ avctx, 
	IntPtr/* AVFrame*  */ picture, 
	out Int32/* System.Int32*  */ got_picture_ptr, 
	IntPtr/* AVPacket*  */ avpkt);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 avcodec_decode_subtitle2(
	IntPtr/* AVCodecContext*  */ avctx, 
	IntPtr/* AVSubtitle*  */ sub, 
	IntPtr/* System.Int32*  */ got_sub_ptr, 
	IntPtr/* AVPacket*  */ avpkt);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern IntPtr/* AVCodecParser*  */ av_parser_next(
	IntPtr/* AVCodecParser*  */ c);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern void av_register_codec_parser(
	IntPtr/* AVCodecParser*  */ parser);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern IntPtr/* AVCodecParserContext*  */ av_parser_init(
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 codec_id);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 av_parser_parse2(
	IntPtr/* AVCodecParserContext*  */ s, 
	IntPtr/* AVCodecContext*  */ avctx, 
	IntPtr/* IntPtr*  */ poutbuf, 
	IntPtr/* System.Int32*  */ poutbuf_size, 
	IntPtr/* System.Byte*  */ buf, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 buf_size, 
	[MarshalAs(UnmanagedType.I8)]
	System.Int64 pts, 
	[MarshalAs(UnmanagedType.I8)]
	System.Int64 dts, 
	[MarshalAs(UnmanagedType.I8)]
	System.Int64 pos);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 av_parser_change(
	IntPtr/* AVCodecParserContext*  */ s, 
	IntPtr/* AVCodecContext*  */ avctx, 
	IntPtr/* IntPtr*  */ poutbuf, 
	IntPtr/* System.Int32*  */ poutbuf_size, 
	IntPtr/* System.Byte*  */ buf, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 buf_size, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 keyframe);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern void av_parser_close(
	IntPtr/* AVCodecParserContext*  */ s);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern IntPtr/* AVCodec*  */ avcodec_find_encoder(
	AVCodecID id);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern IntPtr/* AVCodec*  */ avcodec_find_encoder_by_name(
	[MarshalAs(UnmanagedType.LPStr)]
	string name);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 avcodec_encode_audio(
	IntPtr/* AVCodecContext*  */ avctx, 
	IntPtr/* System.Byte*  */ buf, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 buf_size, 
	IntPtr/* System.Int16*  */ samples);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 avcodec_encode_audio2(
	IntPtr/* AVCodecContext*  */ avctx, 
	IntPtr/* AVPacket*  */ avpkt, 
	IntPtr/* AVFrame*  */ frame, 
	IntPtr/* System.Int32*  */ got_packet_ptr);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 avcodec_encode_video(
	IntPtr/* AVCodecContext*  */ avctx, 
	IntPtr/* System.Byte*  */ buf, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 buf_size, 
	IntPtr/* AVFrame*  */ pict);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 avcodec_encode_video2(
	IntPtr/* AVCodecContext*  */ avctx, 
	IntPtr/* AVPacket*  */ avpkt, 
	IntPtr/* AVFrame*  */ frame, 
	IntPtr/* System.Int32*  */ got_packet_ptr);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 avcodec_encode_subtitle(
	IntPtr/* AVCodecContext*  */ avctx, 
	IntPtr/* System.Byte*  */ buf, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 buf_size, 
	IntPtr/* AVSubtitle*  */ sub);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern IntPtr/* ReSampleContext*  */ av_audio_resample_init(
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 output_channels, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 input_channels, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 output_rate, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 input_rate, 
	AVSampleFormat sample_fmt_out, 
	AVSampleFormat sample_fmt_in, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 filter_length, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 log2_phase_count, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 linear, 
	[MarshalAs(UnmanagedType.R8)]
	System.Double cutoff);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 audio_resample(
	IntPtr/* ReSampleContext*  */ s, 
	IntPtr/* System.Int16*  */ output, 
	IntPtr/* System.Int16*  */ input, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 nb_samples);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern void audio_resample_close(
	IntPtr/* ReSampleContext*  */ s);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern IntPtr/* AVResampleContext*  */ av_resample_init(
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 out_rate, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 in_rate, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 filter_length, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 log2_phase_count, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 linear, 
	[MarshalAs(UnmanagedType.R8)]
	System.Double cutoff);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 av_resample(
	IntPtr/* AVResampleContext*  */ c, 
	IntPtr/* System.Int16*  */ dst, 
	IntPtr/* System.Int16*  */ src, 
	IntPtr/* System.Int32*  */ consumed, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 src_size, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 dst_size, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 update_ctx);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern void av_resample_compensate(
	IntPtr/* AVResampleContext*  */ c, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 sample_delta, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 compensation_distance);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern void av_resample_close(
	IntPtr/* AVResampleContext*  */ c);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 avpicture_alloc(
	IntPtr/* AVPicture*  */ picture, 
	AVPixelFormat pix_fmt, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 width, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 height);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern void avpicture_free(
	IntPtr/* AVPicture*  */ picture);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 avpicture_fill(
	IntPtr/* AVPicture*  */ picture, 
	IntPtr/* System.Byte*  */ ptr, 
	AVPixelFormat pix_fmt, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 width, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 height);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 avpicture_layout(
	IntPtr/* AVPicture*  */ src, 
	AVPixelFormat pix_fmt, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 width, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 height, 
	[MarshalAs(UnmanagedType.LPStr)]
	string dest, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 dest_size);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 avpicture_get_size(
	AVPixelFormat pix_fmt, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 width, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 height);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 avpicture_deinterlace(
	IntPtr/* AVPicture*  */ dst, 
	IntPtr/* AVPicture*  */ src, 
	AVPixelFormat pix_fmt, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 width, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 height);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern void av_picture_copy(
	IntPtr/* AVPicture*  */ dst, 
	IntPtr/* AVPicture*  */ src, 
	AVPixelFormat pix_fmt, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 width, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 height);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 av_picture_crop(
	IntPtr/* AVPicture*  */ dst, 
	IntPtr/* AVPicture*  */ src, 
	AVPixelFormat pix_fmt, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 top_band, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 left_band);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 av_picture_pad(
	IntPtr/* AVPicture*  */ dst, 
	IntPtr/* AVPicture*  */ src, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 height, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 width, 
	AVPixelFormat pix_fmt, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 padtop, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 padbottom, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 padleft, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 padright, 
	IntPtr/* System.Int32*  */ color);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern void avcodec_get_chroma_sub_sample(
	AVPixelFormat pix_fmt, 
	IntPtr/* System.Int32*  */ h_shift, 
	IntPtr/* System.Int32*  */ v_shift);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.UInt32 avcodec_pix_fmt_to_codec_tag(
	AVPixelFormat pix_fmt);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 avcodec_get_pix_fmt_loss(
	AVPixelFormat dst_pix_fmt, 
	AVPixelFormat src_pix_fmt, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 has_alpha);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern AVPixelFormat avcodec_find_best_pix_fmt_of_list(
	IntPtr/* AVPixelFormat*  */ pix_fmt_list, 
	AVPixelFormat src_pix_fmt, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 has_alpha, 
	IntPtr/* System.Int32*  */ loss_ptr);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern AVPixelFormat avcodec_find_best_pix_fmt_of_2(
	AVPixelFormat dst_pix_fmt1, 
	AVPixelFormat dst_pix_fmt2, 
	AVPixelFormat src_pix_fmt, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 has_alpha, 
	IntPtr/* System.Int32*  */ loss_ptr);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern AVPixelFormat avcodec_find_best_pix_fmt2(
	AVPixelFormat dst_pix_fmt1, 
	AVPixelFormat dst_pix_fmt2, 
	AVPixelFormat src_pix_fmt, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 has_alpha, 
	IntPtr/* System.Int32*  */ loss_ptr);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern AVPixelFormat avcodec_default_get_format(
	IntPtr/* AVCodecContext*  */ s, 
	IntPtr/* AVPixelFormat*  */ fmt);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern void avcodec_set_dimensions(
	IntPtr/* AVCodecContext*  */ s, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 width, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 height);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.UInt32 av_get_codec_tag_string(
	[MarshalAs(UnmanagedType.LPStr)]
	string buf, 
	[MarshalAs(UnmanagedType.I4)]
	System.UInt32 buf_size, 
	[MarshalAs(UnmanagedType.I4)]
	System.UInt32 codec_tag);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern void avcodec_string(
	[MarshalAs(UnmanagedType.LPStr)]
	string buf, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 buf_size, 
	IntPtr/* AVCodecContext*  */ enc, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 encode);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern string av_get_profile_name(
	IntPtr/* AVCodec*  */ codec, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 profile);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 avcodec_default_execute(
	IntPtr/* AVCodecContext*  */ c, 
	[MarshalAs(UnmanagedType.FunctionPtr)]
	avcodec_func_0 func, 
	IntPtr/* void*  */ arg, 
	IntPtr/* System.Int32*  */ ret, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 count, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 size);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 avcodec_default_execute2(
	IntPtr/* AVCodecContext*  */ c, 
	[MarshalAs(UnmanagedType.FunctionPtr)]
	avcodec_func_1 func, 
	IntPtr/* void*  */ arg, 
	IntPtr/* System.Int32*  */ ret, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 count);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 avcodec_fill_audio_frame(
	IntPtr/* AVFrame*  */ frame, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 nb_channels, 
	AVSampleFormat sample_fmt, 
	IntPtr/* System.Byte*  */ buf, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 buf_size, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 align);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern void avcodec_flush_buffers(
	IntPtr/* AVCodecContext*  */ avctx);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 av_get_bits_per_sample(
	AVCodecID codec_id);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern AVCodecID av_get_pcm_codec(
	AVSampleFormat fmt, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 be);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 av_get_exact_bits_per_sample(
	AVCodecID codec_id);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 av_get_audio_frame_duration(
	IntPtr/* AVCodecContext*  */ avctx, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 frame_bytes);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern void av_register_bitstream_filter(
	IntPtr/* AVBitStreamFilter*  */ bsf);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern IntPtr/* AVBitStreamFilterContext*  */ av_bitstream_filter_init(
	[MarshalAs(UnmanagedType.LPStr)]
	string name);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 av_bitstream_filter_filter(
	IntPtr/* AVBitStreamFilterContext*  */ bsfc, 
	IntPtr/* AVCodecContext*  */ avctx, 
	[MarshalAs(UnmanagedType.LPStr)]
	string args, 
	IntPtr/* IntPtr*  */ poutbuf, 
	IntPtr/* System.Int32*  */ poutbuf_size, 
	IntPtr/* System.Byte*  */ buf, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 buf_size, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 keyframe);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern void av_bitstream_filter_close(
	IntPtr/* AVBitStreamFilterContext*  */ bsf);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern IntPtr/* AVBitStreamFilter*  */ av_bitstream_filter_next(
	IntPtr/* AVBitStreamFilter*  */ f);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern void av_fast_padded_malloc(
	IntPtr/* void*  */ ptr, 
	IntPtr/* System.UInt32*  */ size, 
	[MarshalAs(UnmanagedType.I4)]
	System.UInt32 min_size);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern void av_fast_padded_mallocz(
	IntPtr/* void*  */ ptr, 
	IntPtr/* System.UInt32*  */ size, 
	[MarshalAs(UnmanagedType.I4)]
	System.UInt32 min_size);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.UInt32 av_xiphlacing(
	[MarshalAs(UnmanagedType.LPStr)]
	string s, 
	[MarshalAs(UnmanagedType.I4)]
	System.UInt32 v);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern void av_log_missing_feature(
	IntPtr/* void*  */ avc, 
	[MarshalAs(UnmanagedType.LPStr)]
	string feature, 
	[MarshalAs(UnmanagedType.I4)]
	System.Int32 want_sample);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern void av_log_ask_for_sample(
	IntPtr/* void*  */ avc, 
	[MarshalAs(UnmanagedType.LPStr)]
	string msg);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern void av_register_hwaccel(
	IntPtr/* AVHWAccel*  */ hwaccel);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern IntPtr/* AVHWAccel*  */ av_hwaccel_next(
	IntPtr/* AVHWAccel*  */ hwaccel);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 av_lockmgr_register(
	[MarshalAs(UnmanagedType.FunctionPtr)]
	avcodec_func_2 cb);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern AVMediaType avcodec_get_type(
	AVCodecID codec_id);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern string avcodec_get_name(
	AVCodecID id);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 avcodec_is_open(
	IntPtr/* AVCodecContext*  */ s);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 av_codec_is_encoder(
	IntPtr/* AVCodec*  */ codec);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern System.Int32 av_codec_is_decoder(
	IntPtr/* AVCodec*  */ codec);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern IntPtr/* AVCodecDescriptor*  */ avcodec_descriptor_get(
	AVCodecID id);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern IntPtr/* AVCodecDescriptor*  */ avcodec_descriptor_next(
	IntPtr/* AVCodecDescriptor*  */ prev);

[DllImport(AVCODEC), SuppressUnmanagedCodeSecurity]
public static extern IntPtr/* AVCodecDescriptor*  */ avcodec_descriptor_get_by_name(
	[MarshalAs(UnmanagedType.LPStr)]
	string name);

public struct AVPanScan{
	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 id;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 width;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 height;

	[MarshalAs(UnmanagedType.ByValArray, SizeConst=6)]
	public Int16[] position;

};

public struct AVCodecContext{
	public IntPtr/* AVClass*  */ av_class;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 log_level_offset;

	public AVMediaType codec_type;

	public IntPtr/* AVCodec*  */ codec;

	[MarshalAs(UnmanagedType.ByValArray, SizeConst=32)]
	public Char[] codec_name;

	public AVCodecID codec_id;

	[MarshalAs(UnmanagedType.I4)]
	public System.UInt32 codec_tag;

	[MarshalAs(UnmanagedType.I4)]
	public System.UInt32 stream_codec_tag;

	public IntPtr/* void*  */ priv_data;

	public IntPtr/* AVCodecInternal*  */ _internal;

	public IntPtr/* void*  */ opaque;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 bit_rate;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 bit_rate_tolerance;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 global_quality;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 compression_level;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 flags;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 flags2;

	public IntPtr/* System.Byte*  */ extradata;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 extradata_size;

	public AVRational time_base;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 ticks_per_frame;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 delay;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 width;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 height;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 coded_width;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 coded_height;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 gop_size;

	public AVPixelFormat pix_fmt;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 me_method;

	[MarshalAs(UnmanagedType.FunctionPtr)]
	public avcodec_func_3 draw_horiz_band;

	[MarshalAs(UnmanagedType.FunctionPtr)]
	public avcodec_func_4 get_format;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 max_b_frames;

	[MarshalAs(UnmanagedType.R4)]
	public float b_quant_factor;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 rc_strategy;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 b_frame_strategy;

	[MarshalAs(UnmanagedType.R4)]
	public float b_quant_offset;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 has_b_frames;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 mpeg_quant;

	[MarshalAs(UnmanagedType.R4)]
	public float i_quant_factor;

	[MarshalAs(UnmanagedType.R4)]
	public float i_quant_offset;

	[MarshalAs(UnmanagedType.R4)]
	public float lumi_masking;

	[MarshalAs(UnmanagedType.R4)]
	public float temporal_cplx_masking;

	[MarshalAs(UnmanagedType.R4)]
	public float spatial_cplx_masking;

	[MarshalAs(UnmanagedType.R4)]
	public float p_masking;

	[MarshalAs(UnmanagedType.R4)]
	public float dark_masking;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 slice_count;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 prediction_method;

	public IntPtr/* System.Int32*  */ slice_offset;

	public AVRational sample_aspect_ratio;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 me_cmp;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 me_sub_cmp;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 mb_cmp;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 ildct_cmp;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 dia_size;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 last_predictor_count;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 pre_me;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 me_pre_cmp;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 pre_dia_size;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 me_subpel_quality;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 dtg_active_format;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 me_range;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 intra_quant_bias;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 inter_quant_bias;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 slice_flags;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 xvmc_acceleration;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 mb_decision;

	public IntPtr/* System.UInt16*  */ intra_matrix;

	public IntPtr/* System.UInt16*  */ inter_matrix;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 scenechange_threshold;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 noise_reduction;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 me_threshold;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 mb_threshold;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 intra_dc_precision;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 skip_top;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 skip_bottom;

	[MarshalAs(UnmanagedType.R4)]
	public float border_masking;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 mb_lmin;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 mb_lmax;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 me_penalty_compensation;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 bidir_refine;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 brd_scale;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 keyint_min;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 refs;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 chromaoffset;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 scenechange_factor;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 mv0_threshold;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 b_sensitivity;

	public AVColorPrimaries color_primaries;

	public AVColorTransferCharacteristic color_trc;

	public AVColorSpace colorspace;

	public AVColorRange color_range;

	public AVChromaLocation chroma_sample_location;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 slices;

	public AVFieldOrder field_order;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 sample_rate;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 channels;

	public AVSampleFormat sample_fmt;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 frame_size;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 frame_number;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 block_align;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 cutoff;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 request_channels;

	[MarshalAs(UnmanagedType.I8)]
	public System.UInt64 channel_layout;

	[MarshalAs(UnmanagedType.I8)]
	public System.UInt64 request_channel_layout;

	public AVAudioServiceType audio_service_type;

	public AVSampleFormat request_sample_fmt;

	[MarshalAs(UnmanagedType.FunctionPtr)]
	public avcodec_func_0 get_buffer;

	[MarshalAs(UnmanagedType.FunctionPtr)]
	public avcodec_func_5 release_buffer;

	[MarshalAs(UnmanagedType.FunctionPtr)]
	public avcodec_func_0 reget_buffer;

	[MarshalAs(UnmanagedType.FunctionPtr)]
	public avcodec_func_6 get_buffer2;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 refcounted_frames;

	[MarshalAs(UnmanagedType.R4)]
	public float qcompress;

	[MarshalAs(UnmanagedType.R4)]
	public float qblur;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 qmin;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 qmax;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 max_qdiff;

	[MarshalAs(UnmanagedType.R4)]
	public float rc_qsquish;

	[MarshalAs(UnmanagedType.R4)]
	public float rc_qmod_amp;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 rc_qmod_freq;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 rc_buffer_size;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 rc_override_count;

	public IntPtr/* RcOverride*  */ rc_override;

	[MarshalAs(UnmanagedType.LPStr)]
	public string rc_eq;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 rc_max_rate;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 rc_min_rate;

	[MarshalAs(UnmanagedType.R4)]
	public float rc_buffer_aggressivity;

	[MarshalAs(UnmanagedType.R4)]
	public float rc_initial_cplx;

	[MarshalAs(UnmanagedType.R4)]
	public float rc_max_available_vbv_use;

	[MarshalAs(UnmanagedType.R4)]
	public float rc_min_vbv_overflow_use;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 rc_initial_buffer_occupancy;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 coder_type;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 context_model;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 lmin;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 lmax;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 frame_skip_threshold;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 frame_skip_factor;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 frame_skip_exp;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 frame_skip_cmp;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 trellis;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 min_prediction_order;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 max_prediction_order;

	[MarshalAs(UnmanagedType.I8)]
	public System.Int64 timecode_frame_start;

	[MarshalAs(UnmanagedType.FunctionPtr)]
	public avcodec_func_7 rtp_callback;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 rtp_payload_size;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 mv_bits;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 header_bits;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 i_tex_bits;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 p_tex_bits;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 i_count;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 p_count;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 skip_count;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 misc_bits;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 frame_bits;

	[MarshalAs(UnmanagedType.LPStr)]
	public string stats_out;

	[MarshalAs(UnmanagedType.LPStr)]
	public string stats_in;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 workaround_bugs;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 strict_std_compliance;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 error_concealment;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 debug;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 debug_mv;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 err_recognition;

	[MarshalAs(UnmanagedType.I8)]
	public System.Int64 reordered_opaque;

	public IntPtr/* AVHWAccel*  */ hwaccel;

	public IntPtr/* void*  */ hwaccel_context;

	[MarshalAs(UnmanagedType.ByValArray, SizeConst=8)]
	public UInt64[] error;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 dct_algo;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 idct_algo;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 bits_per_coded_sample;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 bits_per_raw_sample;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 lowres;

	public IntPtr/* AVFrame*  */ coded_frame;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 thread_count;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 thread_type;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 active_thread_type;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 thread_safe_callbacks;

	[MarshalAs(UnmanagedType.FunctionPtr)]
	public avcodec_func_8 execute;

	[MarshalAs(UnmanagedType.FunctionPtr)]
	public avcodec_func_9 execute2;

	public IntPtr/* void*  */ thread_opaque;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 nsse_weight;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 profile;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 level;

	public AVDiscard skip_loop_filter;

	public AVDiscard skip_idct;

	public AVDiscard skip_frame;

	public IntPtr/* System.Byte*  */ subtitle_header;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 subtitle_header_size;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 error_rate;

	public IntPtr/* AVPacket*  */ pkt;

	[MarshalAs(UnmanagedType.I8)]
	public System.UInt64 vbv_delay;

	public AVRational pkt_timebase;

	public IntPtr/* AVCodecDescriptor*  */ codec_descriptor;

	[MarshalAs(UnmanagedType.I8)]
	public System.Int64 pts_correction_num_faulty_pts;

	[MarshalAs(UnmanagedType.I8)]
	public System.Int64 pts_correction_num_faulty_dts;

	[MarshalAs(UnmanagedType.I8)]
	public System.Int64 pts_correction_last_pts;

	[MarshalAs(UnmanagedType.I8)]
	public System.Int64 pts_correction_last_dts;

	public IntPtr sub_charenc;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 sub_charenc_mode;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 skip_alpha;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 seek_preroll;

};

public struct AVCodec{
	[MarshalAs(UnmanagedType.LPStr)]
	public string name;

	[MarshalAs(UnmanagedType.LPStr)]
	public string long_name;

	public AVMediaType type;

	public AVCodecID id;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 capabilities;

	public IntPtr/* AVRational*  */ supported_framerates;

	public IntPtr/* AVPixelFormat*  */ pix_fmts;

	public IntPtr/* System.Int32*  */ supported_samplerates;

	private IntPtr/* AVSampleFormat*  */ _sample_fmts;
    public List<AVSampleFormat> sample_fmts
    {
        get
        {
            if (_sample_fmts == IntPtr.Zero)
                return new List<AVSampleFormat>();

            List<AVSampleFormat> ret = new List<AVSampleFormat>();
            int index = 0;

            while (true)
            {
                IntPtr address = new IntPtr(_sample_fmts.ToInt64() + index * 4);
                Int32 fmt = Marshal.ReadInt32(address);
                if (fmt == -1)
                    break;

                ret.Add((AVSampleFormat)fmt);
            }
            return ret;
        }
    }

	public IntPtr/* System.UInt64*  */ channel_layouts;

	[MarshalAs(UnmanagedType.I1)]
	public System.Byte max_lowres;

	public IntPtr/* AVClass*  */ priv_class;

	public IntPtr/* AVProfile*  */ profiles;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 priv_data_size;

	public IntPtr/* AVCodec*  */ next;

	[MarshalAs(UnmanagedType.FunctionPtr)]
	public avcodec_func_10 init_thread_copy;

	[MarshalAs(UnmanagedType.FunctionPtr)]
	public avcodec_func_0 update_thread_context;

	public IntPtr/* AVCodecDefault*  */ defaults;

	[MarshalAs(UnmanagedType.FunctionPtr)]
	public avcodec_func_11 init_static_data;

	[MarshalAs(UnmanagedType.FunctionPtr)]
	public avcodec_func_10 init;

	[MarshalAs(UnmanagedType.FunctionPtr)]
	public avcodec_func_12 encode_sub;

	[MarshalAs(UnmanagedType.FunctionPtr)]
	public avcodec_func_13 encode2;

	[MarshalAs(UnmanagedType.FunctionPtr)]
	public avcodec_func_13 decode;

	[MarshalAs(UnmanagedType.FunctionPtr)]
	public avcodec_func_10 close;

	[MarshalAs(UnmanagedType.FunctionPtr)]
	public avcodec_func_11 flush;

};

public struct AVProfile{
	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 profile;

	[MarshalAs(UnmanagedType.LPStr)]
	public string name;

};

public struct AVSubtitle{
	[MarshalAs(UnmanagedType.I2)]
	public System.UInt16 format;

	[MarshalAs(UnmanagedType.I4)]
	public System.UInt32 start_display_time;

	[MarshalAs(UnmanagedType.I4)]
	public System.UInt32 end_display_time;

	[MarshalAs(UnmanagedType.I4)]
	public System.UInt32 num_rects;

	public IntPtr/* IntPtr*  */ rects;

	[MarshalAs(UnmanagedType.I8)]
	public System.Int64 pts;

};

public struct AVSubtitleRect{
	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 x;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 y;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 w;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 h;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 nb_colors;

	public AVPicture pict;

	public AVSubtitleType type;

	[MarshalAs(UnmanagedType.LPStr)]
	public string text;

	[MarshalAs(UnmanagedType.LPStr)]
	public string ass;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 flags;

};

public struct AVPicture{
	[MarshalAs(UnmanagedType.ByValArray, SizeConst=8)]
	public IntPtr[] data;

	[MarshalAs(UnmanagedType.ByValArray, SizeConst=8)]
	public Int32[] linesize;

};

public struct AVPacket{
	public IntPtr/* AVBufferRef*  */ buf;

	[MarshalAs(UnmanagedType.I8)]
	public System.Int64 pts;

	[MarshalAs(UnmanagedType.I8)]
	public System.Int64 dts;

	public IntPtr/* System.Byte*  */ data;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 size;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 stream_index;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 flags;

	public IntPtr/* *  */ side_data;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 side_data_elems;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 duration;

	[MarshalAs(UnmanagedType.FunctionPtr)]
	public avcodec_func_11 destruct;

	public IntPtr/* void*  */ priv;

	[MarshalAs(UnmanagedType.I8)]
	public System.Int64 pos;

	[MarshalAs(UnmanagedType.I8)]
	public System.Int64 convergence_duration;

};

public struct RcOverride{
	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 start_frame;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 end_frame;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 qscale;

	[MarshalAs(UnmanagedType.R4)]
	public float quality_factor;

};

public struct AVHWAccel{
	[MarshalAs(UnmanagedType.LPStr)]
	public string name;

	public AVMediaType type;

	public AVCodecID id;

	public AVPixelFormat pix_fmt;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 capabilities;

	public IntPtr/* AVHWAccel*  */ next;

	[MarshalAs(UnmanagedType.FunctionPtr)]
	public avcodec_func_14 start_frame;

	[MarshalAs(UnmanagedType.FunctionPtr)]
	public avcodec_func_14 decode_slice;

	[MarshalAs(UnmanagedType.FunctionPtr)]
	public avcodec_func_10 end_frame;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 priv_data_size;

	[MarshalAs(UnmanagedType.FunctionPtr)]
	public avcodec_func_11 decode_mb;

};

public struct AVCodecDescriptor{
	public AVCodecID id;

	public AVMediaType type;

	[MarshalAs(UnmanagedType.LPStr)]
	public string name;

	[MarshalAs(UnmanagedType.LPStr)]
	public string long_name;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 props;

};

public struct AVCodecParserContext{
	public IntPtr/* void*  */ priv_data;

	public IntPtr/* AVCodecParser*  */ parser;

	[MarshalAs(UnmanagedType.I8)]
	public System.Int64 frame_offset;

	[MarshalAs(UnmanagedType.I8)]
	public System.Int64 cur_offset;

	[MarshalAs(UnmanagedType.I8)]
	public System.Int64 next_frame_offset;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 pict_type;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 repeat_pict;

	[MarshalAs(UnmanagedType.I8)]
	public System.Int64 pts;

	[MarshalAs(UnmanagedType.I8)]
	public System.Int64 dts;

	[MarshalAs(UnmanagedType.I8)]
	public System.Int64 last_pts;

	[MarshalAs(UnmanagedType.I8)]
	public System.Int64 last_dts;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 fetch_timestamp;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 cur_frame_start_index;

	[MarshalAs(UnmanagedType.ByValArray, SizeConst=4)]
	public Int64[] cur_frame_offset;

	[MarshalAs(UnmanagedType.ByValArray, SizeConst=4)]
	public Int64[] cur_frame_pts;

	[MarshalAs(UnmanagedType.ByValArray, SizeConst=4)]
	public Int64[] cur_frame_dts;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 flags;

	[MarshalAs(UnmanagedType.I8)]
	public System.Int64 offset;

	[MarshalAs(UnmanagedType.ByValArray, SizeConst=4)]
	public Int64[] cur_frame_end;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 key_frame;

	[MarshalAs(UnmanagedType.I8)]
	public System.Int64 convergence_duration;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 dts_sync_point;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 dts_ref_dts_delta;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 pts_dts_delta;

	[MarshalAs(UnmanagedType.ByValArray, SizeConst=4)]
	public Int64[] cur_frame_pos;

	[MarshalAs(UnmanagedType.I8)]
	public System.Int64 pos;

	[MarshalAs(UnmanagedType.I8)]
	public System.Int64 last_pos;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 duration;

	public AVFieldOrder field_order;

	public AVPictureStructure picture_structure;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 output_picture_number;

};

public struct AVCodecParser{
	[MarshalAs(UnmanagedType.ByValArray, SizeConst=5)]
	public Int32[] codec_ids;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 priv_data_size;

	[MarshalAs(UnmanagedType.FunctionPtr)]
	public avcodec_func_10 parser_init;

	[MarshalAs(UnmanagedType.FunctionPtr)]
	public avcodec_func_15 parser_parse;

	[MarshalAs(UnmanagedType.FunctionPtr)]
	public avcodec_func_11 parser_close;

	[MarshalAs(UnmanagedType.FunctionPtr)]
	public avcodec_func_6 split;

	public IntPtr/* AVCodecParser*  */ next;

};

public struct AVBitStreamFilterContext{
	public IntPtr/* void*  */ priv_data;

	public IntPtr/* AVBitStreamFilter*  */ filter;

	public IntPtr/* AVCodecParserContext*  */ parser;

	public IntPtr/* AVBitStreamFilterContext*  */ next;

};

public struct AVBitStreamFilter{
	[MarshalAs(UnmanagedType.LPStr)]
	public string name;

	[MarshalAs(UnmanagedType.I4)]
	public System.Int32 priv_data_size;

	[MarshalAs(UnmanagedType.FunctionPtr)]
	public avcodec_func_16 filter;

	[MarshalAs(UnmanagedType.FunctionPtr)]
	public avcodec_func_11 close;

	public IntPtr/* AVBitStreamFilter*  */ next;

};

public delegate System.Int32 avcodec_func_0(
	IntPtr/* AVCodecContext*  */ c2, 
	IntPtr/* void*  */ arg2);

public delegate System.Int32 avcodec_func_1(
	IntPtr/* AVCodecContext*  */ c2, 
	IntPtr/* void*  */ arg2, 
	[MarshalAs(UnmanagedType.I4)]System.Int32 __arg2, 
	[MarshalAs(UnmanagedType.I4)]System.Int32 __arg3);

public delegate System.Int32 avcodec_func_2(
	IntPtr/* IntPtr*  */ mutex, 
	AVLockOp op);

public delegate void avcodec_func_3(
	IntPtr/* AVCodecContext*  */ s, 
	IntPtr/* AVFrame*  */ src, 
	IntPtr offset, 
	[MarshalAs(UnmanagedType.I4)]System.Int32 y, 
	[MarshalAs(UnmanagedType.I4)]System.Int32 type, 
	[MarshalAs(UnmanagedType.I4)]System.Int32 height);

public delegate AVPixelFormat avcodec_func_4(
	IntPtr/* AVCodecContext*  */ s, 
	IntPtr/* AVPixelFormat*  */ fmt);

public delegate void avcodec_func_5(
	IntPtr/* AVCodecContext*  */ c, 
	IntPtr/* AVFrame*  */ pic);

public delegate System.Int32 avcodec_func_6(
	IntPtr/* AVCodecContext*  */ s, 
	IntPtr/* AVFrame*  */ frame, 
	[MarshalAs(UnmanagedType.I4)]System.Int32 flags);

public delegate void avcodec_func_7(
	IntPtr/* AVCodecContext*  */ avctx, 
	IntPtr/* void*  */ data, 
	[MarshalAs(UnmanagedType.I4)]System.Int32 size, 
	[MarshalAs(UnmanagedType.I4)]System.Int32 mb_nb);

public delegate System.Int32 avcodec_func_8(
	IntPtr/* AVCodecContext*  */ c, 
	[MarshalAs(UnmanagedType.FunctionPtr)]avcodec_func_0 func, 
	IntPtr/* void*  */ arg2, 
	IntPtr/* System.Int32*  */ ret, 
	[MarshalAs(UnmanagedType.I4)]System.Int32 count, 
	[MarshalAs(UnmanagedType.I4)]System.Int32 size);

public delegate System.Int32 avcodec_func_9(
	IntPtr/* AVCodecContext*  */ c, 
	[MarshalAs(UnmanagedType.FunctionPtr)]avcodec_func_1 func, 
	IntPtr/* void*  */ arg2, 
	IntPtr/* System.Int32*  */ ret, 
	[MarshalAs(UnmanagedType.I4)]System.Int32 count);

public delegate System.Int32 avcodec_func_10(
	IntPtr/* AVCodecContext*  */ __arg0);

public delegate void avcodec_func_11(
	IntPtr/* AVCodec*  */ codec);

public delegate System.Int32 avcodec_func_12(
	IntPtr/* AVCodecContext*  */ __arg0, 
	IntPtr/* System.Byte*  */ buf, 
	[MarshalAs(UnmanagedType.I4)]System.Int32 buf_size, 
	IntPtr/* AVSubtitle*  */ sub);

public delegate System.Int32 avcodec_func_13(
	IntPtr/* AVCodecContext*  */ avctx, 
	IntPtr/* AVPacket*  */ avpkt, 
	IntPtr/* AVFrame*  */ frame, 
	IntPtr/* System.Int32*  */ got_packet_ptr);

public delegate System.Int32 avcodec_func_14(
	IntPtr/* AVCodecContext*  */ avctx, 
	IntPtr/* System.Byte*  */ buf, 
	[MarshalAs(UnmanagedType.I4)]System.UInt32 buf_size);

public delegate System.Int32 avcodec_func_15(
	IntPtr/* AVCodecParserContext*  */ s, 
	IntPtr/* AVCodecContext*  */ avctx, 
	IntPtr/* IntPtr*  */ poutbuf, 
	IntPtr/* System.Int32*  */ poutbuf_size, 
	IntPtr/* System.Byte*  */ buf, 
	[MarshalAs(UnmanagedType.I4)]System.Int32 buf_size);

public delegate System.Int32 avcodec_func_16(
	IntPtr/* AVBitStreamFilterContext*  */ bsfc, 
	IntPtr/* AVCodecContext*  */ avctx, 
	[MarshalAs(UnmanagedType.LPStr)]string args, 
	IntPtr/* IntPtr*  */ poutbuf, 
	IntPtr/* System.Int32*  */ poutbuf_size, 
	IntPtr/* System.Byte*  */ buf, 
	[MarshalAs(UnmanagedType.I4)]System.Int32 buf_size, 
	[MarshalAs(UnmanagedType.I4)]System.Int32 keyframe);

}
}

